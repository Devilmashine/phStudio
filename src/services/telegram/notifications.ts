import { TELEGRAM_CONFIG } from './config';
import { BookingData } from '../../types';
import { getBookingById } from '../booking';

const sendTelegramMessage = async (chatId: string, message: string) => {
  const url = `https://api.telegram.org/bot${TELEGRAM_CONFIG.botToken}/sendMessage`;

  await fetch(url, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      chat_id: chatId,
      text: message,
      parse_mode: 'HTML',
    }),
  });
};

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ –Ω–æ–≤–æ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏.
 */
export async function sendAdminNotification(booking: BookingData) {
  const message = `
üéØ <b>–ù–æ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ!</b>

üë§ –ö–ª–∏–µ–Ω—Ç: ${booking.name}
üì± –¢–µ–ª–µ—Ñ–æ–Ω: ${booking.phone}
üìÖ –î–∞—Ç–∞: ${booking.date}
üïí –í—Ä–µ–º—è: ${booking.times.join(', ')}
üí∞ –°—É–º–º–∞: ${booking.totalPrice} ‚ÇΩ

${booking.id ? `
<b>–ù–∞–∂–º–∏—Ç–µ /confirm_${booking.id} –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –±—Ä–æ–Ω–∏</b>
<b>–ù–∞–∂–º–∏—Ç–µ /cancel_${booking.id} –¥–ª—è –æ—Ç–º–µ–Ω—ã –±—Ä–æ–Ω–∏</b>
` : ''}
`;

  await sendTelegramMessage(TELEGRAM_CONFIG.adminChatId!, message);
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.
 */
export async function sendClientNotification(booking: BookingData) {
  if (!booking.clientChatId) {
    console.warn('No client chat ID provided for booking notification');
    return;
  }

  const message = `
‚ú® <b>–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ!</b>

–î–µ—Ç–∞–ª–∏ –≤–∞—à–µ–π –±—Ä–æ–Ω–∏:
üìÖ –î–∞—Ç–∞: ${booking.date}
üïí –í—Ä–µ–º—è: ${booking.times.join(', ')}
üí∞ –°—É–º–º–∞: ${booking.totalPrice} ‚ÇΩ

–ñ–¥–µ–º –≤–∞—Å –≤ —Å—Ç—É–¥–∏–∏!
`;

  await sendTelegramMessage(booking.clientChatId, message);
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É –æ–± –æ—Ç–º–µ–Ω–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.
 */
export async function sendCancellationNotification(booking: BookingData) {
  if (!booking.clientChatId) {
    console.warn('No client chat ID provided for cancellation notification');
    return;
  }

  const message = `
üö´ <b>–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ!</b>

–í–∞—à–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ ${booking.date} –≤ ${booking.times.join(', ')} –±—ã–ª–æ –æ—Ç–º–µ–Ω–µ–Ω–æ.

–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏.
`;

  await sendTelegramMessage(booking.clientChatId, message);
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.
 */
export async function handleConfirmation(bookingId: string) {
  const booking = await getBookingById(bookingId);
  
  if (!booking) {
    console.error(`Booking ${bookingId} not found`);
    return;
  }

  booking.status = 'confirmed';
  await sendClientNotification(booking);
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –æ—Ç–º–µ–Ω—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.
 */
export async function handleCancellation(bookingId: string) {
  const booking = await getBookingById(bookingId);
  
  if (!booking) {
    console.error(`Booking ${bookingId} not found`);
    return;
  }

  booking.status = 'cancelled';
  await sendCancellationNotification(booking);
}