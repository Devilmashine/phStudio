import axios from 'axios';
import { BookingData } from '../../types';
import { createCalendarEvent } from '../calendar/api';

// –¢–∏–ø—ã –¥–ª—è Telegram
interface TelegramUser {
  id: number;
  first_name: string;
  last_name?: string;
  username?: string;
}

interface TelegramMessage {
  chat: { id: string };
  message_id: number;
  phone: string;
  date: string;
  times: string[];
}

interface TelegramCallbackQuery {
  callback_data?: string;
  message: TelegramMessage;
  from: TelegramUser;
}

// –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π
interface BookingActionLog {
  id: string; // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ª–æ–≥–∞
  timestamp: Date;
  bookingId?: string; 
  action: 'confirmed' | 'rejected' | 'created';
  performer: {
    id: number;
    firstName: string;
    lastName?: string;
    username?: string;
  };
  details: {
    calendarEventId?: string;
    reason?: string;
    additionalInfo?: Record<string, any>;
  };
  status: 'success' | 'error' | 'pending';
  errorMessage?: string;
}

export class TelegramNotificationService {
  private static instance: TelegramNotificationService;
  private bookingActionLogs: BookingActionLog[] = [];

  private constructor() {
    console.warn('üö® TELEGRAM NOTIFICATION SERVICE INITIALIZATION üö®');
  }

  public static getInstance(): TelegramNotificationService {
    if (!TelegramNotificationService.instance) {
      TelegramNotificationService.instance = new TelegramNotificationService();
    }
    return TelegramNotificationService.instance;
  }

  private formatBookingMessage(booking: BookingData): string {
    const formattedPhone = booking.phone.startsWith('+') 
      ? booking.phone 
      : `+${booking.phone}`;

    // Convert date to DD.MM.YYYY format
    const [year, month, day] = booking.date.split('-');
    const formattedDate = `${day}.${month}.${year}`;

    return `${formattedDate}
${booking.times.join(', ')}
${booking.name}
${formattedPhone}`;
  }

  private generateLogId(): string {
    return `log_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
  }

  private logBookingAction(
    logEntry: Omit<BookingActionLog, 'id' | 'status'>, 
    status: BookingActionLog['status'] = 'success'
  ): BookingActionLog {
    const safeLogEntry = {
      ...logEntry,
      bookingId: logEntry.bookingId || this.generateLogId()
    };

    const logWithId: BookingActionLog = {
      id: this.generateLogId(),
      status,
      ...safeLogEntry
    };

    this.bookingActionLogs.push(logWithId);
    
    console.log(`üìù Booking Action Log [${logWithId.id}]: 
    Action: ${logWithId.action} 
    Booking ID: ${logWithId.bookingId || 'N/A'}
    Performer: ${logWithId.performer.firstName} ${logWithId.performer.lastName || ''}
    Status: ${logWithId.status}`);

    return logWithId;
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
  public getBookingActionLogs(filters: Partial<BookingActionLog> = {}): BookingActionLog[] {
    return this.bookingActionLogs.filter(log => 
      Object.entries(filters).every(([key, value]) => 
        key === 'bookingId' 
          ? log.bookingId === value 
          : log[key as keyof BookingActionLog] === value
      )
    );
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤
  public clearBookingActionLogs(olderThan?: Date): void {
    if (olderThan) {
      this.bookingActionLogs = this.bookingActionLogs.filter(
        log => log.timestamp > olderThan
      );
    } else {
      this.bookingActionLogs = [];
    }
    console.warn('üßπ Booking action logs cleared');
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ª–æ–≥–∞ –ø–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—é
  public getLastBookingActionLog(bookingId: string): BookingActionLog | undefined {
    return this.bookingActionLogs
      .filter(log => log.bookingId === bookingId)
      .sort((a, b) => b.timestamp.getTime() - a.timestamp.getTime())[0];
  }

  public async sendBookingNotification(booking: BookingData): Promise<boolean> {
    // –£–¥–∞–ª—è–µ–º –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ botToken –∏ adminChatId, –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º true
    // –†–µ–∞–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∏–¥—ë—Ç —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –±—ç–∫–µ–Ω–¥
    this.logBookingAction({
      timestamp: new Date(),
      bookingId: booking.id,
      action: 'created',
      performer: {
        id: 0,
        firstName: 'System',
        lastName: '',
        username: ''
      },
      details: {}
    });
    return true;
  }

  public async handleCallbackQuery(callbackQuery: TelegramCallbackQuery): Promise<void> {
    console.log('üîç RECEIVED CALLBACK QUERY:', JSON.stringify(callbackQuery, null, 2));

    const { callback_data, message, from } = callbackQuery;

    if (!callback_data) {
      console.error('‚ùå NO CALLBACK DATA RECEIVED');
      return;
    }

    // –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    console.log('üîë Callback Data:', callback_data);
    console.log('üë§ User:', JSON.stringify(from, null, 2));
    console.log('üì® Message:', JSON.stringify(message, null, 2));

    const [action, bookingId] = callback_data.split(':');

    console.log(`üö¶ Action: ${action}, Booking ID: ${bookingId}`);

    try {
      switch (action) {
        case 'confirm_booking':
          console.log(`‚úÖ Attempting to confirm booking: ${bookingId}`);
          await this.confirmBooking(bookingId, from, message);
          break;
        case 'reject_booking':
          console.log(`‚ùå Attempting to reject booking: ${bookingId}`);
          await this.rejectBooking(bookingId, from, message);
          break;
        default:
          console.warn(`‚ùì UNKNOWN CALLBACK ACTION: ${action}`);
      }
    } catch (error) {
      console.error('‚ùå CALLBACK QUERY PROCESSING FAILED', error);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ Telegram
      try {
        await this.sendErrorNotification(
          message.chat.id, 
          `–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–µ–π—Å—Ç–≤–∏—è: ${action}\n${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`
        );
      } catch (notificationError) {
        console.error('‚ùå FAILED TO SEND ERROR NOTIFICATION', notificationError);
      }
    }
  }

  // –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö
  private async sendErrorNotification(chatId: string, errorMessage: string): Promise<void> {
    const botToken = this.getBotToken();
    
    if (!botToken) {
      console.error('‚ùå BOT TOKEN IS MISSING');
      return;
    }

    try {
      await axios.post(
        `https://api.telegram.org/bot${botToken}/sendMessage`,
        {
          chat_id: chatId,
          text: `‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:\n${errorMessage}`,
          parse_mode: 'HTML'
        },
        { timeout: 5000 }
      );
    } catch (error) {
      console.error('‚ùå FAILED TO SEND ERROR MESSAGE', error);
    }
  }

  private async confirmBooking(bookingId: string, user: TelegramUser, message: TelegramMessage): Promise<void> {
    console.log(`üîî Confirm Booking Method Called - Booking ID: ${bookingId}`);
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      if (!bookingId) {
        throw new Error('Booking ID is required');
      }

      // –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ Google Calendar
      const calendarEvent = await createCalendarEvent({
        summary: `–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: ${user.first_name} ${user.last_name || ''}`,
        description: `–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è ${user.first_name} ${user.last_name || ''}`,
        start: { 
          dateTime: new Date(message.date + 'T' + message.times[0]).toISOString() 
        },
        end: { 
          dateTime: new Date(message.date + 'T' + message.times[message.times.length - 1]).toISOString() 
        }
      });

      console.log(`üìÖ Calendar Event Created: ${calendarEvent.id}`);

      // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
      const actionLog = this.logBookingAction({
        timestamp: new Date(),
        bookingId,
        action: 'confirmed',
        performer: {
          id: user.id,
          firstName: user.first_name,
          lastName: user.last_name,
          username: user.username
        },
        details: {
          calendarEventId: calendarEvent.id
        }
      });

      console.log(`üìù Action Log Created: ${actionLog.id}`);

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
      await this.answerCallbackQuery(bookingId, '‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ', true);
      
      console.log(`üì§ Callback Query Answered`);

      await this.editMessageText(
        message.chat.id, 
        message.message_id, 
        `${this.formatBookingMessage} \n\n‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º ${user.first_name} ${user.last_name || ''}`
      );

      console.log(`üìù Message Edited`);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
      await this.sendAdminNotification(
        '–í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ - –Ω–µ –∑–∞–±—É–¥—å—Ç–µ —Å–æ–æ–±—â–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—É –æ–± —É—Å–ø–µ—à–Ω–æ–π –∑–∞–ø–∏—Å–∏!'
      );

      console.log(`üì® Admin Notification Sent`);

    } catch (error) {
      console.error('‚ùå BOOKING CONFIRMATION FAILED', error);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
      await this.sendErrorNotification(
        message.chat.id, 
        `–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`
      );

      throw error; // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
    }
  }

  private async rejectBooking(bookingId: string, user: TelegramUser, message: TelegramMessage): Promise<void> {
    try {
      // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
      this.logBookingAction({
        timestamp: new Date(),
        bookingId,
        action: 'rejected',
        performer: {
          id: user.id,
          firstName: user.first_name,
          lastName: user.last_name,
          username: user.username
        },
        details: {
          reason: 'Manual rejection by admin'
        }
      });

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
      await this.answerCallbackQuery(bookingId, '‚ùå –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ', true);
      await this.editMessageText(
        message.chat.id, 
        message.message_id, 
        `${this.formatBookingMessage} \n\n‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º ${user.first_name} ${user.last_name || ''}`
      );

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
      await this.sendAdminNotification(
        '–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ, —Å–æ–æ–±—â–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç—É –æ–± —ç—Ç–æ–º –∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –¥–∞—Ç—É'
      );
    } catch (error) {
      console.error('‚ùå BOOKING REJECTION FAILED', error);
    }
  }

  private async sendAdminNotification(message: string): Promise<void> {
    const botToken = this.getBotToken();
    const adminChatId = this.getAdminChatId();

    if (!botToken || !adminChatId) {
      console.error('‚ùå TELEGRAM CONFIGURATION INCOMPLETE');
      return;
    }

    try {
      await axios.post(
        `https://api.telegram.org/bot${botToken}/sendMessage`,
        {
          chat_id: adminChatId,
          text: message,
          parse_mode: 'HTML'
        },
        { timeout: 5000 }
      );
    } catch (error) {
      console.error('‚ùå ADMIN NOTIFICATION FAILED', error);
    }
  }

  private async answerCallbackQuery(bookingId: string, text: string, showAlert: boolean = false): Promise<void> {
    const botToken = this.getBotToken();
    if (!botToken) {
      console.error('‚ùå BOT TOKEN IS MISSING');
      return;
    }

    await axios.post(
      `https://api.telegram.org/bot${botToken}/answerCallbackQuery`,
      {
        callback_query_id: bookingId,
        text,
        show_alert: showAlert
      }
    );
  }

  private async editMessageText(chatId: string, messageId: number, text: string): Promise<void> {
    const botToken = this.getBotToken();
    if (!botToken) {
      console.error('‚ùå BOT TOKEN IS MISSING');
      return;
    }

    await axios.post(
      `https://api.telegram.org/bot${botToken}/editMessageText`,
      {
        chat_id: chatId,
        message_id: messageId,
        text,
        parse_mode: 'HTML'
      }
    );
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –∏ chat ID —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
  private getBotToken(): string {
    return (
      import.meta.env.VITE_TELEGRAM_BOT_TOKEN || 
      process.env.VITE_TELEGRAM_BOT_TOKEN || 
      process.env.TELEGRAM_BOT_TOKEN || 
      ''
    );
  }

  private getAdminChatId(): string {
    return (
      import.meta.env.VITE_TELEGRAM_ADMIN_CHAT_ID || 
      process.env.VITE_TELEGRAM_ADMIN_CHAT_ID || 
      process.env.TELEGRAM_ADMIN_CHAT_ID || 
      ''
    );
  }

  // –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
}

// –≠–∫—Å–ø–æ—Ä—Ç —Å–∏–Ω–≥–ª—Ç–æ–Ω–∞
export const telegramNotificationService = TelegramNotificationService.getInstance();

// –§—É–Ω–∫—Ü–∏—è —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
export async function sendBookingToTelegramWithRetry(
  booking: BookingData, 
  maxRetries: number = 3
): Promise<boolean> {
  for (let attempt = 1; attempt <= maxRetries; attempt++) {
    try {
      const result = await telegramNotificationService.sendBookingNotification(booking);
      
      if (result) {
        return true;
      }

      // –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å, –∂–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
      await new Promise(resolve => setTimeout(resolve, attempt * 1000));
    } catch {
      // –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–ø—ã—Ç–∫–∏
      if (attempt === maxRetries) {
        return false;
      }
    }
  }

  return false;
}

export async function sendBookingToTelegram(booking: BookingData): Promise<{success: boolean, result?: any}> {
  const result = await telegramNotificationService.sendBookingNotification(booking);
  return { success: result };
}