import { bookingApi } from '../utils/api';
import { BookingData } from '../utils/validation';

interface BookingResponse {
  message?: string;
  booking_id?: string;
  calendar_link?: string;
  telegram_notification?: boolean;
  details?: Record<string, any>;
}

export const createBooking = async (bookingData: Omit<BookingData, 'description' | 'id'>) => {
  try {
    console.error('üì§ –û–¢–õ–ê–î–ö–ê createBooking', {
      bookingData: JSON.stringify(bookingData, null, 2)
    });

    const response = await bookingApi.post<BookingResponse>('/api/bookings', bookingData);
    
    if (response.message) {
      console.log('–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ:', response);
      return {
        booking_id: response.booking_id || 'unknown',
        calendar_link: response.calendar_link || '',
        telegram_notification: response.telegram_notification || false,
        details: response.details || {}
      };
    }
    
    throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
    throw error;
  }
};
