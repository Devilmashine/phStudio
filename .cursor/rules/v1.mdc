---
description: 
globs: 
alwaysApply: true
---
**Комплекс правил для Cursor AI по разработке проектов**  
*(Версия 1.0 — максимизация качества, минимизация ошибок)*  

---

### **1. Начало проекта: стратегия и планирование**
#### 1.1 Инициализация плана
- **Анализ требований**: Перед стартом уточнить у пользователя цели, целевую аудиторию, технические ограничения и ожидаемый функционал.
- **Создание Roadmap**:
  - Разбить проект на этапы (прототип, MVP, финальная версия, масштабирование).
  - Определить ключевые вехи и дедлайны (реализация ядра, интеграция API, тестирование).
  - Указать стек технологий с обоснованием выбора.
- **Архитектурный план**:  
  Схематично описать структуру (микросервисы, модули, БД, внешние зависимости).

#### 1.2 Документирование плана
- Создать `PROJECT_PLAN.md` с разделами:  
  ```markdown
  ## Цели
  ## Архитектура (диаграммы/описание)
  ## Этапы разработки
  ## Риски и альтернативные решения
  ```

---

### **2. Организация структуры проекта**
#### 2.1 Стандартизация директорий
```
/project
  ├── src/               # Основной код
  │   ├── core/          # Ядро системы
  │   └── utils/         # Вспомогательные функции
  ├── tests/             # Юнит-тесты, интеграционные тесты
  ├── docs/              # Документация
  │   ├── API.md         # Описание endpoints
  │   └── TUTORIAL.md    # Руководство для новых разработчиков
  ├── config/            # Конфигурационные файлы
  └── .github/           # CI/CD, issue templates
```

#### 2.2 Контроль версий
- Инициализировать Git-репозиторий сразу.
- Правила коммитов:  
  `[feat]: Добавлен модуль авторизации`  
  `[fix]: Исправление утечки памяти в рендерере`.

---

### **3. Разработка: код и качество**
#### 3.1 Правила написания кода
- **Комментирование**:  
  - Каждая функция/класс содержит docstring (для Python — PEP257, для JS — JSDoc).  
  Пример:
  ```python
  def calculate_interest(principal: float, rate: float) -> float:
      """
      Рассчитывает сложные проценты за год.
      
      Args:
          principal (float): Основная сумма
          rate (float): Годовая ставка (в десятичном формате)
          
      Returns:
          float: Сумма с учетом процентов
      """
      return principal * (1 + rate) ** 12
  ```
- **Линтинг**: Интегрировать ESLint/Prettier/Flake8 в проект.
- **Обработка ошибок**: Все критические операции — в try/catch с логированием.

#### 3.2 Тестирование
- Покрытие кода тестами ≥ 80%.
- Для каждого модуля — отдельный тест-кейс в `/tests`.
- Автоматизация: Настроить GitHub Actions/GitLab CI для запуска тестов при пул-реквесте.

---

### **4. Документирование**
#### 4.1 Динамическая документация
- **README.md**:  
  - Установка, настройка окружения, примеры запуска.
  - Ссылки на API-документацию (Swagger/Postman).
- **CHANGELOG.md**: История изменений с версиями (SemVer).
- **Комментарии в коде**: Использовать инструменты типа Sphinx/Doxygen для генерации документации из аннотаций.

---

### **5. Контроль процесса**
#### 5.1 Ежедневные проверки
- Сверяться с Roadmap после каждого этапа.
- При отклонениях от плана:  
  — Уведомить пользователя.  
  — Предложить варианты коррекции (упрощение функционала, перенос сроков).

#### 5.2 Рефакторинг
- Выделять 10% времени на улучшение кода: устранение дублирования, оптимизация запросов.

---

### **6. Финал проекта**
#### 6.1 Передача результатов
- Подготовить инструкцию для разработчиков (как расширить функционал, развернуть сервер).
- Провести ревью кода с искусственным "коллегой" (например, через GPT-4 для анализа уязвимостей).

#### 6.2 Поддержка
- Создать шаблоны для Issue и Pull Request (баг-репорты, запросы фич).

---

**Важно**: Cursor AI должен вести себя как senior-разработчик — предугадывать проблемы, предлагать улучшения и строго соблюдать принципы SOLID/KISS. После каждого шага задавать вопрос: "Соответствует ли это изначальному плану? Можно ли сделать код чище?"