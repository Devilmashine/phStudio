import unittest
from backend.app.services.telegram_templates import booking_message_with_buttons

class TestBookingMessageWithButtons(unittest.TestCase):
    def test_booking_message_with_valid_data(self):
        service = "–°—Ç—É–¥–∏–π–Ω–∞—è —Ñ–æ—Ç–æ—Å–µ—Å—Å–∏—è"
        date = "2025-05-12"
        times = ["10:00", "12:00"]
        name = "–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤"
        phone = "+79991234567"
        total_price = 5000
        people_count = 2

        message, buttons = booking_message_with_buttons(service, date, times, name, phone, total_price, people_count)

        expected_message = (
            f"üé® –ù–æ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ:\n"
            f"–£—Å–ª—É–≥–∞: {service}\n"
            f"–î–∞—Ç–∞: {date}\n"
            f"–í—Ä–µ–º—è: {', '.join(times)}\n"
            f"–ö–ª–∏–µ–Ω—Ç: {name}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫: {people_count}\n"
            f"–°—É–º–º–∞: {total_price} —Ä—É–±."
        )

        self.assertEqual(message, expected_message)
        self.assertEqual(len(buttons), 2)
        self.assertEqual(buttons[0][0]['text'], "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")
        self.assertEqual(buttons[1][0]['text'], "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å")

    def test_booking_message_with_missing_phone_and_price(self):
        service = "–°—Ç—É–¥–∏–π–Ω–∞—è —Ñ–æ—Ç–æ—Å–µ—Å—Å–∏—è"
        date = "2025-05-12"
        times = ["10:00", "12:00"]
        name = "–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤"
        phone = None
        total_price = 0
        people_count = 2

        with self.assertRaises(ValueError):
            booking_message_with_buttons(service, date, times, name, phone, total_price, people_count)

    def test_booking_message_with_empty_name(self):
        service = "–°—Ç—É–¥–∏–π–Ω–∞—è —Ñ–æ—Ç–æ—Å–µ—Å—Å–∏—è"
        date = "2025-05-12"
        times = ["10:00", "12:00"]
        name = ""
        phone = "+79991234567"
        total_price = 5000
        people_count = 2

        with self.assertRaises(ValueError):
            booking_message_with_buttons(service, date, times, name, phone, total_price, people_count)

    def test_booking_message_with_empty_phone(self):
        service = "–°—Ç—É–¥–∏–π–Ω–∞—è —Ñ–æ—Ç–æ—Å–µ—Å—Å–∏—è"
        date = "2025-05-12"
        times = ["10:00", "12:00"]
        name = "–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤"
        phone = ""
        total_price = 5000
        people_count = 2

        with self.assertRaises(ValueError):
            booking_message_with_buttons(service, date, times, name, phone, total_price, people_count)

    def test_booking_message_with_zero_price(self):
        service = "–°—Ç—É–¥–∏–π–Ω–∞—è —Ñ–æ—Ç–æ—Å–µ—Å—Å–∏—è"
        date = "2025-05-12"
        times = ["10:00", "12:00"]
        name = "–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤"
        phone = "+79991234567"
        total_price = 0
        people_count = 2

        with self.assertRaises(ValueError) as exc:
            booking_message_with_buttons(service, date, times, name, phone, total_price, people_count)
        assert "–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0" in str(exc.exception)

if __name__ == "__main__":
    unittest.main()
