from typing import Optional
import logging
from app.core.config import get_settings
import aiohttp
import ssl
from app.services.telegram_templates import booking_message_with_buttons

logger = logging.getLogger(__name__)


class TelegramBotService:
    def __init__(self):
        settings = get_settings()
        self.bot_token = settings.TELEGRAM_BOT_TOKEN
        self.chat_id = settings.TELEGRAM_CHAT_ID
        self.api_url = f"https://api.telegram.org/bot{self.bot_token}/sendMessage"

    async def send_booking_notification(
        self,
        message: str,
        booking_id: str = None,
        service=None,
        date=None,
        times=None,
        name=None,
        phone=None,
        total_price=None,
        people_count=None,
    ) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤ Telegram —Å inline-–∫–Ω–æ–ø–∫–∞–º–∏
        """
        # –Ø–≤–Ω–∞—è —Å—Ç—Ä–æ–≥–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –≤—Å–µ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        if not service or not isinstance(service, str) or not service.strip():
            raise ValueError("–ü–∞—Ä–∞–º–µ—Ç—Ä 'service' –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π")
        if not date or not isinstance(date, str) or not date.strip():
            raise ValueError("–ü–∞—Ä–∞–º–µ—Ç—Ä 'date' –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π")
        if (
            not times
            or not isinstance(times, (list, tuple))
            or not all(isinstance(t, str) and t.strip() for t in times)
        ):
            raise ValueError(
                "–ü–∞—Ä–∞–º–µ—Ç—Ä 'times' –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º —Å—Ç—Ä–æ–∫ –∏ –Ω–µ –ø—É—Å—Ç—ã–º"
            )
        if not name or not isinstance(name, str) or not name.strip():
            raise ValueError("–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π")
        if not phone or not isinstance(phone, str) or not phone.strip():
            raise ValueError("–¢–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π")
        try:
            price_val = int(total_price)
            if price_val <= 0:
                raise ValueError("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
        except Exception as e:
            raise ValueError(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ü–µ–Ω–∞: {total_price}, –æ—à–∏–±–∫–∞: {e}")
        if (
            people_count is None
            or not isinstance(people_count, int)
            or people_count < 1
        ):
            raise ValueError(
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º"
            )

        logger.info(
            f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: service={service}, date={date}, times={times}, name={name}, phone={phone}, total_price={total_price}, people_count={people_count}"
        )
        text, buttons = booking_message_with_buttons(
            service, date, times, name, phone, total_price, people_count
        )
        payload = {
            "chat_id": self.chat_id,
            "text": text,
            "parse_mode": "HTML",
            "reply_markup": {"inline_keyboard": buttons},
        }

        try:
            # Create SSL context that handles certificate verification
            ssl_context = ssl.create_default_context()
            # For development environments with SSL certificate issues
            ssl_context.check_hostname = False
            ssl_context.verify_mode = ssl.CERT_NONE
            
            connector = aiohttp.TCPConnector(ssl=ssl_context)
            async with aiohttp.ClientSession(connector=connector) as session:
                async with session.post(self.api_url, json=payload) as resp:
                    if resp.status == 200:
                        logger.info(f"Sending Telegram notification: {payload['text']}")
                        return True
                    else:
                        logger.error(
                            f"Telegram API error: {resp.status}, Response: {await resp.text()}"
                        )
                        logger.info(f"–û—Ç–≤–µ—Ç Telegram API: {await resp.text()}")
                        return False
        except Exception as e:
            logger.error(f"Failed to send Telegram notification: {e}")
            return False

    async def send_booking_confirmation(
        self,
        booking_id: str,
        client_name: str,
        date: str,
        time: str,
        additional_info: Optional[str] = None,
    ) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤ Telegram
        """
        try:
            message = (
                f"‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ\n\n"
                f"üÜî ID: {booking_id}\n"
                f"üë§ –ö–ª–∏–µ–Ω—Ç: {client_name}\n"
                f"üìÖ –î–∞—Ç–∞: {date}\n"
                f"üïí –í—Ä–µ–º—è: {time}\n"
            )

            if additional_info:
                message += f"\nüìù –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n{additional_info}"

            ssl_context = ssl.create_default_context()
            ssl_context.check_hostname = False
            ssl_context.verify_mode = ssl.CERT_NONE
            connector = aiohttp.TCPConnector(ssl=ssl_context)
            async with aiohttp.ClientSession(connector=connector) as session:
                payload = {
                    "chat_id": self.chat_id,
                    "text": message,
                    "parse_mode": "HTML",
                }
                async with session.post(self.api_url, json=payload) as resp:
                    if resp.status == 200:
                        logger.info(f"Sending booking confirmation: {message}")
                        return True
                    else:
                        logger.error(
                            f"Telegram API error: {resp.status}, Response: {await resp.text()}"
                        )
                        return False
        except Exception as e:
            logger.error(f"Failed to send booking confirmation: {e}")
            return False

    async def send_booking_cancellation(
        self, booking_id: str, client_name: str, reason: Optional[str] = None
    ) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤ Telegram
        """
        try:
            message = (
                f"‚ùå –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ\n\n"
                f"üÜî ID: {booking_id}\n"
                f"üë§ –ö–ª–∏–µ–Ω—Ç: {client_name}\n"
            )

            if reason:
                message += f"\nüìù –ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–º–µ–Ω—ã:\n{reason}"

            ssl_context = ssl.create_default_context()
            ssl_context.check_hostname = False
            ssl_context.verify_mode = ssl.CERT_NONE
            connector = aiohttp.TCPConnector(ssl=ssl_context)
            async with aiohttp.ClientSession(connector=connector) as session:
                payload = {
                    "chat_id": self.chat_id,
                    "text": message,
                    "parse_mode": "HTML",
                }
                async with session.post(self.api_url, json=payload) as resp:
                    if resp.status == 200:
                        logger.info(f"Sending cancellation notification: {message}")
                        return True
                    else:
                        logger.error(
                            f"Telegram API error: {resp.status}, Response: {await resp.text()}"
                        )
                        return False
        except Exception as e:
            logger.error(f"Failed to send cancellation notification: {e}")
            return False
