from app.services.google_calendar import GoogleCalendarService
from app.services.telegram_bot import TelegramBotService
from datetime import datetime
import logging

logger = logging.getLogger(__name__)

class BookingService:
    @staticmethod
    def create_booking(data):
        try:
            calendar_service = GoogleCalendarService()
            telegram_service = TelegramBotService()

            booking_result = calendar_service.create_event(
                start_time=datetime.fromisoformat(f"{data['date']}T{data['time']}"),
                description=data.get('description', '')
            )
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            message = f"üé• –ù–æ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ:\n\n" \
                      f"üìÖ –î–∞—Ç–∞: {data['date']}\n" \
                      f"üïí –í—Ä–µ–º—è: {data['time']}\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, –µ—Å–ª–∏ –µ—Å—Ç—å
            if data.get('description') and data['description'].strip():
                message += f"\nüí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {data['description']}"

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —Ç–µ–ª–µ–≥—Ä–∞–º
            telegram_service.send_booking_notification(message)
            
            return {
                'status': 'success',
                'message': '–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ',
                'booking_details': booking_result
            }
        
        except Exception as e:
            logger.error(f"Booking error: {e}")
            return {
                'status': 'error',
                'message': '–û—à–∏–±–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è'
            }
