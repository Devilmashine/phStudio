import logging

logger = logging.getLogger(__name__)

# –®–∞–±–ª–æ–Ω —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è Telegram (—Ç–æ–ª—å–∫–æ —Å –∫–Ω–æ–ø–∫–∞–º–∏, –±–µ–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è)
def booking_message_with_buttons(service, date, times, name, phone, total_price):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: service={service}, date={date}, times={times}, name={name}, phone={phone}, total_price={total_price}")
    # –Ø–≤–Ω–∞—è —Å—Ç—Ä–æ–≥–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –≤—Å–µ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    if not service or not isinstance(service, str) or not service.strip():
        logger.error("–ü–∞—Ä–∞–º–µ—Ç—Ä 'service' –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π")
        raise ValueError("–ü–∞—Ä–∞–º–µ—Ç—Ä 'service' –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π")
    if not date or not isinstance(date, str) or not date.strip():
        logger.error("–ü–∞—Ä–∞–º–µ—Ç—Ä 'date' –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π")
        raise ValueError("–ü–∞—Ä–∞–º–µ—Ç—Ä 'date' –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π")
    if not times or not isinstance(times, (list, tuple)) or not all(isinstance(t, str) and t.strip() for t in times):
        logger.error(f"–ü–∞—Ä–∞–º–µ—Ç—Ä 'times' –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º —Å—Ç—Ä–æ–∫, –ø–æ–ª—É—á–µ–Ω–æ: {times}")
        raise ValueError("–ü–∞—Ä–∞–º–µ—Ç—Ä 'times' –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º —Å—Ç—Ä–æ–∫ –∏ –Ω–µ –ø—É—Å—Ç—ã–º")
    if not name or not isinstance(name, str) or not name.strip():
        logger.error("–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π")
        raise ValueError("–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π")
    if not phone or not isinstance(phone, str) or not phone.strip():
        logger.error("–¢–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π")
        raise ValueError("–¢–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π")
    try:
        price_val = int(total_price)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è total_price: {total_price}, –æ—à–∏–±–∫–∞: {e}")
        raise ValueError(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ü–µ–Ω–∞: {total_price}, –æ—à–∏–±–∫–∞: {e}")
    if price_val <= 0:
        logger.error(f"–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0, –ø–æ–ª—É—á–µ–Ω–æ: {total_price}")
        raise ValueError("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
    price_str = f"{price_val} —Ä—É–±."
    phone = phone if phone else '–ù–µ —É–∫–∞–∑–∞–Ω'
    logger.debug(f"–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: phone={phone}, total_price={price_str}")
    message = (
        f"üé® –ù–æ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ:\n"
        f"–£—Å–ª—É–≥–∞: {service}\n"
        f"–î–∞—Ç–∞: {date}\n"
        f"–í—Ä–µ–º—è: {', '.join(times)}\n"
        f"–ö–ª–∏–µ–Ω—Ç: {name}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
        f"–°—É–º–º–∞: {price_str}"
    )
    buttons = [
        [{"text": "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "callback_data": "confirm"}],
        [{"text": "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", "callback_data": "reject"}]
    ]
    logger.info(f"–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message}")
    return message, buttons