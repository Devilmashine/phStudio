# –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:
# pip install fastapi
# pip install python-dotenv
# pip install uvicorn
# pip install google-api-python-client
# pip install python-telegram-bot

from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel, Field
from datetime import datetime, timedelta
import asyncio
import os
from dotenv import load_dotenv
import logging
import os
from logging.handlers import RotatingFileHandler

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
def setup_logging():
    log_dir = os.path.join(os.path.dirname(__file__), 'logs')
    os.makedirs(log_dir, exist_ok=True)
    
    log_file = os.path.join(log_dir, 'app.log')
    
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        handlers=[
            logging.StreamHandler(),  # –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
            RotatingFileHandler(
                log_file, 
                maxBytes=10*1024*1024,  # 10 –ú–ë
                backupCount=5
            )
        ]
    )

# –í—ã–∑—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ–¥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
setup_logging()

logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ò–º–ø–æ—Ä—Ç —Å–µ—Ä–≤–∏—Å–æ–≤
from app.services.google_calendar import GoogleCalendarService
from app.services.telegram_bot import TelegramBotService

app = FastAPI()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π credentials
app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:3000"],  # –¢–æ—á–Ω—ã–π –¥–æ–º–µ–Ω —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

def generate_time_slots(start_hour=9, end_hour=20, slot_duration=1):
    slots = []
    current_time = datetime.strptime(f"{start_hour:02d}:00", "%H:%M")
    end_time = datetime.strptime(f"{end_hour:02d}:00", "%H:%M")
    
    while current_time < end_time:
        next_time = current_time + timedelta(hours=slot_duration)
        slots.append({
            "startTime": current_time.strftime("%H:%M"),
            "endTime": next_time.strftime("%H:%M"),
            "available": True,
            "bookedPercentage": 0
        })
        current_time = next_time
    
    return slots

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
try:
    calendar_service = GoogleCalendarService.get_instance()
    logger.info("Google Calendar Service —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
except Exception as e:
    logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Google Calendar Service: {str(e)}")
    calendar_service = None

try:
    telegram_service = TelegramBotService.get_instance(os.getenv('TELEGRAM_BOT_TOKEN'))
    logger.info("Telegram Bot Service —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
except Exception as e:
    logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram Bot Service: {str(e)}")
    telegram_service = None

class BookingData(BaseModel):
    date: str
    times: list[str]
    name: str
    phone: str
    totalPrice: int
    service: str = "–°—Ç—É–¥–∏–π–Ω–∞—è —Ñ–æ—Ç–æ—Å–µ—Å—Å–∏—è"

class CalendarEventData(BaseModel):
    title: str
    description: str
    start_time: str
    duration_hours: int = Field(default=1, ge=1, le=8)

class TelegramNotificationData(BaseModel):
    name: str
    phone: str
    date: str
    times: list[str]
    totalPrice: int

@app.get("/api/calendar/available-slots")
async def get_available_slots(date: str):
    # –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    return {
        "date": date,
        "isAvailable": True,
        "status": "available",
        "slots": generate_time_slots()
    }

@app.post("/api/bookings")
async def create_booking(booking_data: BookingData):
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤
        if calendar_service is None:
            logger.error("Google Calendar Service –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            raise HTTPException(status_code=500, detail="–°–µ—Ä–≤–∏—Å –∫–∞–ª–µ–Ω–¥–∞—Ä—è –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        
        if telegram_service is None:
            logger.error("Telegram Bot Service –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            raise HTTPException(status_code=500, detail="–°–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –≤ Google Calendar
        event_data = {
            'summary': f'–§–æ—Ç–æ—Å–µ—Å—Å–∏—è –¥–ª—è {booking_data.name}',
            'description': f'–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ—Å—Ç—É–¥–∏–∏. –ö–ª–∏–µ–Ω—Ç: {booking_data.name}, –¢–µ–ª–µ—Ñ–æ–Ω: {booking_data.phone}',
            'start': {
                'dateTime': f'{booking_data.date}T{booking_data.times[0]}:00',
                'timeZone': 'Europe/Moscow',
            },
            'end': {
                'dateTime': f'{booking_data.date}T{booking_data.times[-1].split("-")[1]}:00',
                'timeZone': 'Europe/Moscow',
            },
        }
        
        calendar_event = calendar_service.create_event(event_data)
        
        if not calendar_event:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ")
            raise HTTPException(status_code=500, detail="–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ")
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è Telegram
        booking_message = (
            f"üé® –ù–æ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ:\n"
            f"–£—Å–ª—É–≥–∞: {booking_data.service}\n"
            f"–î–∞—Ç–∞: {booking_data.date}\n"
            f"–í—Ä–µ–º—è: {', '.join(booking_data.times)}\n"
            f"–ö–ª–∏–µ–Ω—Ç: {booking_data.name}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {booking_data.phone}\n"
            f"–°—É–º–º–∞: {booking_data.totalPrice} —Ä—É–±."
        )
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram
        telegram_notification_sent = await telegram_service.send_booking_notification(booking_message)
        
        if not telegram_notification_sent:
            logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram")
        
        return {
            "message": "–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ",
            "booking_id": calendar_event.get('id', 'unknown'),
            "calendar_link": calendar_event.get('htmlLink', ''),
            "telegram_notification": telegram_notification_sent,
            "details": {
                "date": booking_data.date,
                "times": booking_data.times,
                "name": booking_data.name,
                "phone": booking_data.phone,
                "total_price": booking_data.totalPrice
            }
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}")
        raise HTTPException(status_code=400, detail=str(e))

@app.post("/api/calendar/events")
async def create_calendar_event(event_data: CalendarEventData):
    try:
        if calendar_service is None:
            logger.error("Google Calendar Service –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            raise HTTPException(status_code=500, detail="–°–µ—Ä–≤–∏—Å –∫–∞–ª–µ–Ω–¥–∞—Ä—è –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        
        # –ü–∞—Ä—Å–∏–Ω–≥ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞
        start_datetime = datetime.fromisoformat(event_data.start_time)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è —Å —É—á–µ—Ç–æ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        event = {
            'summary': event_data.title,
            'description': event_data.description,
            'start': {
                'dateTime': start_datetime.isoformat(),
                'timeZone': 'Europe/Moscow',
            },
            'end': {
                'dateTime': (start_datetime + timedelta(hours=event_data.duration_hours)).isoformat(),
                'timeZone': 'Europe/Moscow',
            },
        }
        
        calendar_event = calendar_service.create_event(event)
        
        if not calendar_event:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ")
            raise HTTPException(status_code=500, detail="–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ")
        
        return {
            "id": calendar_event.get('id'),
            "link": calendar_event.get('htmlLink'),
            "status": "success"
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ: {str(e)}")
        raise HTTPException(status_code=400, detail=str(e))

@app.post("/api/telegram/notify")
async def send_telegram_notification(notification_data: TelegramNotificationData):
    try:
        if telegram_service is None:
            logger.error("Telegram Bot Service –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            raise HTTPException(status_code=500, detail="–°–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        booking_message = (
            f"üé® –ù–æ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ:\n"
            f"–î–∞—Ç–∞: {notification_data.date}\n"
            f"–í—Ä–µ–º—è: {', '.join(notification_data.times)}\n"
            f"–ö–ª–∏–µ–Ω—Ç: {notification_data.name}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {notification_data.phone}\n"
            f"–°—É–º–º–∞: {notification_data.totalPrice} —Ä—É–±."
        )
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        telegram_notification_sent = await telegram_service.send_booking_notification(booking_message)
        
        if not telegram_notification_sent:
            logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram")
            raise HTTPException(status_code=500, detail="–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")
        
        return {
            "status": "success",
            "message": "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {str(e)}")
        raise HTTPException(status_code=400, detail=str(e))
