"""Add enhanced CRM models

Revision ID: d29e37a1c479
Revises: fc89c451261f
Create Date: 2025-09-02 01:28:48.763043

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'd29e37a1c479'
down_revision: Union[str, None] = 'fc89c451261f'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Create enums if they don't exist
    op.execute("""
        DO $$ BEGIN
            CREATE TYPE employeerole AS ENUM ('OWNER', 'ADMIN', 'MANAGER', 'STAFF', 'VIEWER');
        EXCEPTION
            WHEN duplicate_object THEN null;
        END $$;
    """)
    op.execute("""
        DO $$ BEGIN
            CREATE TYPE employeestatus AS ENUM ('ACTIVE', 'INACTIVE', 'SUSPENDED', 'LOCKED', 'PENDING_ACTIVATION');
        EXCEPTION
            WHEN duplicate_object THEN null;
        END $$;
    """)
    op.execute("""
        DO $$ BEGIN
            CREATE TYPE bookingstate AS ENUM ('draft', 'pending', 'confirmed', 'in_progress', 'completed', 'cancelled', 'no_show', 'rescheduled');
        EXCEPTION
            WHEN duplicate_object THEN null;
        END $$;
    """)
    op.execute("""
        DO $$ BEGIN
            CREATE TYPE paymentstatus AS ENUM ('pending', 'partial', 'paid', 'refunded', 'failed');
        EXCEPTION
            WHEN duplicate_object THEN null;
        END $$;
    """)
    op.execute("""
        DO $$ BEGIN
            CREATE TYPE bookingsource AS ENUM ('website', 'phone', 'walk_in', 'email', 'referral', 'social_media');
        EXCEPTION
            WHEN duplicate_object THEN null;
        END $$;
    """)
    op.execute("""
        DO $$ BEGIN
            CREATE TYPE spacetype AS ENUM ('studio_a', 'studio_b', 'studio_c', 'outdoor', 'meeting_room', 'dressing_room');
        EXCEPTION
            WHEN duplicate_object THEN null;
        END $$;
    """)
    
    op.create_table('employees',
    sa.Column('employee_id', sa.String(length=20), nullable=False, comment='Internal employee ID (e.g., EMP001)'),
    sa.Column('username', sa.String(length=50), nullable=False),
    sa.Column('email', sa.String(length=255), nullable=False),
    sa.Column('password_hash', sa.String(length=255), nullable=False, comment='Argon2 password hash'),
    sa.Column('role', postgresql.ENUM('OWNER', 'ADMIN', 'MANAGER', 'STAFF', 'VIEWER', name='employeerole'), nullable=False),
    sa.Column('status', postgresql.ENUM('ACTIVE', 'INACTIVE', 'SUSPENDED', 'LOCKED', 'PENDING_ACTIVATION', name='employeestatus'), nullable=False),
    sa.Column('mfa_secret', sa.String(length=32), nullable=True, comment='TOTP secret for MFA'),
    sa.Column('mfa_enabled', sa.Boolean(), nullable=False),
    sa.Column('mfa_backup_codes', sa.Text(), nullable=True, comment='Backup codes for MFA recovery'),
    sa.Column('password_changed_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('password_expires_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('password_history', sa.Text(), nullable=True, comment='Last 5 password hashes to prevent reuse'),
    sa.Column('failed_login_attempts', sa.Integer(), nullable=False),
    sa.Column('locked_until', sa.DateTime(timezone=True), nullable=True),
    sa.Column('last_login', sa.DateTime(timezone=True), nullable=True),
    sa.Column('last_activity', sa.DateTime(timezone=True), nullable=True),
    sa.Column('last_password_reset', sa.DateTime(timezone=True), nullable=True),
    sa.Column('full_name', sa.String(length=200), nullable=False),
    sa.Column('phone', sa.String(length=20), nullable=True),
    sa.Column('department', sa.String(length=50), nullable=True),
    sa.Column('position', sa.String(length=100), nullable=True),
    sa.Column('hire_date', sa.DateTime(timezone=True), nullable=True),
    sa.Column('timezone', sa.String(length=50), nullable=False),
    sa.Column('language', sa.String(length=10), nullable=False),
    sa.Column('notification_preferences', sa.Text(), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('created_by', sa.Integer(), nullable=True),
    sa.Column('updated_by', sa.Integer(), nullable=True),
    sa.Column('version', sa.Integer(), nullable=False),
    sa.Column('is_deleted', sa.Boolean(), nullable=False),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('deleted_by', sa.Integer(), nullable=True),
    sa.Column('audit_trail', sa.Text(), nullable=True),
    sa.Column('model_metadata', sa.Text(), nullable=True),
    sa.CheckConstraint('LENGTH(password_hash) >= 32', name='check_password_hash_min_length'),
    sa.CheckConstraint('LENGTH(username) >= 3', name='check_username_min_length'),
    sa.CheckConstraint('failed_login_attempts >= 0', name='check_failed_logins_non_negative'),
    sa.ForeignKeyConstraint(['created_by'], ['employees.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['deleted_by'], ['employees.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['updated_by'], ['employees.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email', name='uq_email'),
    sa.UniqueConstraint('employee_id', name='uq_employee_id'),
    sa.UniqueConstraint('username', name='uq_username')
    )
    op.create_index('idx_employee_department_status', 'employees', ['department', 'status'], unique=False)
    op.create_index('idx_employee_failed_logins', 'employees', ['failed_login_attempts', 'locked_until'], unique=False)
    op.create_index('idx_employee_last_activity', 'employees', ['last_activity'], unique=False)
    op.create_index('idx_employee_role_status', 'employees', ['role', 'status'], unique=False)
    op.create_index(op.f('ix_employees_created_at'), 'employees', ['created_at'], unique=False)
    op.create_index(op.f('ix_employees_created_by'), 'employees', ['created_by'], unique=False)
    op.create_index(op.f('ix_employees_department'), 'employees', ['department'], unique=False)
    op.create_index(op.f('ix_employees_email'), 'employees', ['email'], unique=True)
    op.create_index(op.f('ix_employees_employee_id'), 'employees', ['employee_id'], unique=True)
    op.create_index(op.f('ix_employees_id'), 'employees', ['id'], unique=False)
    op.create_index(op.f('ix_employees_is_deleted'), 'employees', ['is_deleted'], unique=False)
    op.create_index(op.f('ix_employees_last_activity'), 'employees', ['last_activity'], unique=False)
    op.create_index(op.f('ix_employees_last_login'), 'employees', ['last_login'], unique=False)
    op.create_index(op.f('ix_employees_locked_until'), 'employees', ['locked_until'], unique=False)
    op.create_index(op.f('ix_employees_password_changed_at'), 'employees', ['password_changed_at'], unique=False)
    op.create_index(op.f('ix_employees_password_expires_at'), 'employees', ['password_expires_at'], unique=False)
    op.create_index(op.f('ix_employees_phone'), 'employees', ['phone'], unique=False)
    op.create_index(op.f('ix_employees_role'), 'employees', ['role'], unique=False)
    op.create_index(op.f('ix_employees_status'), 'employees', ['status'], unique=False)
    op.create_index(op.f('ix_employees_updated_at'), 'employees', ['updated_at'], unique=False)
    op.create_index(op.f('ix_employees_updated_by'), 'employees', ['updated_by'], unique=False)
    op.create_index(op.f('ix_employees_username'), 'employees', ['username'], unique=True)
    op.create_index(op.f('ix_employees_version'), 'employees', ['version'], unique=False)
    op.create_table('bookings_legacy',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('date', sa.DateTime(timezone=True), nullable=False),
    sa.Column('start_time', sa.DateTime(timezone=True), nullable=False),
    sa.Column('end_time', sa.DateTime(timezone=True), nullable=False),
    sa.Column('status', sa.Enum('PENDING', 'CONFIRMED', 'CANCELLED', 'COMPLETED', name='bookingstatus'), nullable=False),
    sa.Column('total_price', sa.Float(), nullable=False),
    sa.Column('client_name', sa.String(length=200), nullable=False),
    sa.Column('client_phone', sa.String(length=20), nullable=False),
    sa.Column('client_email', sa.String(length=255), nullable=True),
    sa.Column('phone_normalized', sa.String(length=20), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('people_count', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('calendar_event_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['calendar_event_id'], ['calendar_events.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_bookings_client_phone', 'bookings_legacy', ['client_phone'], unique=False)
    op.create_index('idx_bookings_created_at', 'bookings_legacy', ['created_at'], unique=False)
    op.create_index('idx_bookings_date', 'bookings_legacy', ['date'], unique=False)
    op.create_index('idx_bookings_date_range', 'bookings_legacy', ['start_time', 'end_time'], unique=False)
    op.create_index('idx_bookings_phone_normalized', 'bookings_legacy', ['phone_normalized'], unique=False)
    op.create_index('idx_bookings_status', 'bookings_legacy', ['status'], unique=False)
    op.create_index(op.f('ix_bookings_legacy_id'), 'bookings_legacy', ['id'], unique=False)
    op.create_table('domain_events',
    sa.Column('event_id', sa.UUID(), nullable=True),
    sa.Column('aggregate_id', sa.String(length=50), nullable=False),
    sa.Column('aggregate_type', sa.String(length=50), nullable=False),
    sa.Column('event_type', sa.String(length=100), nullable=False),
    sa.Column('event_data', sa.JSON(), nullable=False),
    sa.Column('event_metadata', sa.JSON(), nullable=True),
    sa.Column('occurred_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('processed_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('created_by', sa.Integer(), nullable=True),
    sa.Column('updated_by', sa.Integer(), nullable=True),
    sa.Column('version', sa.Integer(), nullable=False),
    sa.Column('is_deleted', sa.Boolean(), nullable=False),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('deleted_by', sa.Integer(), nullable=True),
    sa.Column('audit_trail', sa.Text(), nullable=True),
    sa.Column('model_metadata', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['created_by'], ['employees.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['deleted_by'], ['employees.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['updated_by'], ['employees.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('event_id')
    )
    op.create_index('idx_event_aggregate', 'domain_events', ['aggregate_type', 'aggregate_id'], unique=False)
    op.create_index('idx_event_occurred', 'domain_events', ['occurred_at'], unique=False)
    op.create_index('idx_event_type', 'domain_events', ['event_type'], unique=False)
    op.create_index(op.f('ix_domain_events_created_at'), 'domain_events', ['created_at'], unique=False)
    op.create_index(op.f('ix_domain_events_created_by'), 'domain_events', ['created_by'], unique=False)
    op.create_index(op.f('ix_domain_events_id'), 'domain_events', ['id'], unique=False)
    op.create_index(op.f('ix_domain_events_is_deleted'), 'domain_events', ['is_deleted'], unique=False)
    op.create_index(op.f('ix_domain_events_updated_at'), 'domain_events', ['updated_at'], unique=False)
    op.create_index(op.f('ix_domain_events_updated_by'), 'domain_events', ['updated_by'], unique=False)
    op.create_index(op.f('ix_domain_events_version'), 'domain_events', ['version'], unique=False)
    op.create_table('employee_sessions',
    sa.Column('session_id', sa.String(length=64), nullable=False),
    sa.Column('refresh_token', sa.String(length=255), nullable=False),
    sa.Column('ip_address', sa.String(length=45), nullable=True),
    sa.Column('user_agent', sa.Text(), nullable=True),
    sa.Column('expires_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('employee_id', sa.Integer(), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('created_by', sa.Integer(), nullable=True),
    sa.Column('updated_by', sa.Integer(), nullable=True),
    sa.Column('version', sa.Integer(), nullable=False),
    sa.Column('is_deleted', sa.Boolean(), nullable=False),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('deleted_by', sa.Integer(), nullable=True),
    sa.Column('audit_trail', sa.Text(), nullable=True),
    sa.Column('model_metadata', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['created_by'], ['employees.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['deleted_by'], ['employees.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['employee_id'], ['employees.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['updated_by'], ['employees.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_session_employee_active', 'employee_sessions', ['employee_id', 'is_active'], unique=False)
    op.create_index('idx_session_expires', 'employee_sessions', ['expires_at'], unique=False)
    op.create_index(op.f('ix_employee_sessions_created_at'), 'employee_sessions', ['created_at'], unique=False)
    op.create_index(op.f('ix_employee_sessions_created_by'), 'employee_sessions', ['created_by'], unique=False)
    op.create_index(op.f('ix_employee_sessions_employee_id'), 'employee_sessions', ['employee_id'], unique=False)
    op.create_index(op.f('ix_employee_sessions_expires_at'), 'employee_sessions', ['expires_at'], unique=False)
    op.create_index(op.f('ix_employee_sessions_id'), 'employee_sessions', ['id'], unique=False)
    op.create_index(op.f('ix_employee_sessions_is_active'), 'employee_sessions', ['is_active'], unique=False)
    op.create_index(op.f('ix_employee_sessions_is_deleted'), 'employee_sessions', ['is_deleted'], unique=False)
    op.create_index(op.f('ix_employee_sessions_refresh_token'), 'employee_sessions', ['refresh_token'], unique=False)
    op.create_index(op.f('ix_employee_sessions_session_id'), 'employee_sessions', ['session_id'], unique=True)
    op.create_index(op.f('ix_employee_sessions_updated_at'), 'employee_sessions', ['updated_at'], unique=False)
    op.create_index(op.f('ix_employee_sessions_updated_by'), 'employee_sessions', ['updated_by'], unique=False)
    op.create_index(op.f('ix_employee_sessions_version'), 'employee_sessions', ['version'], unique=False)
    op.add_column('bookings', sa.Column('booking_reference', sa.String(length=20), nullable=False, comment='Unique booking reference (e.g., REF-20240101-0001)'))
    op.add_column('bookings', sa.Column('booking_date', sa.Date(), nullable=False))
    op.add_column('bookings', sa.Column('duration_hours', sa.Numeric(precision=4, scale=2), nullable=False, comment='Duration in hours (cached for performance)'))
    op.add_column('bookings', sa.Column('state', postgresql.ENUM('DRAFT', 'PENDING', 'CONFIRMED', 'IN_PROGRESS', 'COMPLETED', 'CANCELLED', 'NO_SHOW', 'RESCHEDULED', name='bookingstate'), nullable=False))
    op.add_column('bookings', sa.Column('state_history', sa.Text(), nullable=True, comment='Complete state transition history'))
    op.add_column('bookings', sa.Column('client_phone_normalized', sa.String(length=15), nullable=False, comment='E.164 normalized phone number'))
    op.add_column('bookings', sa.Column('space_type', postgresql.ENUM('STUDIO_A', 'STUDIO_B', 'STUDIO_C', 'OUTDOOR', 'MEETING_ROOM', 'DRESSING_ROOM', name='spacetype'), nullable=False))
    op.add_column('bookings', sa.Column('equipment_requested', sa.Text(), nullable=True, comment='Requested equipment and accessories'))
    op.add_column('bookings', sa.Column('special_requirements', sa.Text(), nullable=True))
    op.add_column('bookings', sa.Column('base_price', sa.Numeric(precision=10, scale=2), nullable=False, comment='Base price for the space and time'))
    op.add_column('bookings', sa.Column('equipment_price', sa.Numeric(precision=10, scale=2), nullable=False, comment='Additional equipment costs'))
    op.add_column('bookings', sa.Column('discount_amount', sa.Numeric(precision=10, scale=2), nullable=False, comment='Discount amount applied'))
    op.add_column('bookings', sa.Column('payment_status', postgresql.ENUM('PENDING', 'PARTIAL', 'PAID', 'REFUNDED', 'FAILED', name='paymentstatus'), nullable=False))
    op.add_column('bookings', sa.Column('source', postgresql.ENUM('WEBSITE', 'PHONE', 'WALK_IN', 'EMAIL', 'REFERRAL', 'SOCIAL_MEDIA', name='bookingsource'), nullable=False))
    op.add_column('bookings', sa.Column('internal_notes', sa.Text(), nullable=True, comment='Staff-only notes'))
    op.add_column('bookings', sa.Column('tags', sa.Text(), nullable=True, comment='Tags for categorization and search'))
    op.add_column('bookings', sa.Column('priority', sa.Integer(), nullable=False, comment='Priority level (1=low, 5=high)'))
    op.add_column('bookings', sa.Column('created_by', sa.Integer(), nullable=True))
    op.add_column('bookings', sa.Column('updated_by', sa.Integer(), nullable=True))
    op.add_column('bookings', sa.Column('version', sa.Integer(), nullable=False))
    op.add_column('bookings', sa.Column('is_deleted', sa.Boolean(), nullable=False))
    op.add_column('bookings', sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True))
    op.add_column('bookings', sa.Column('deleted_by', sa.Integer(), nullable=True))
    op.add_column('bookings', sa.Column('audit_trail', sa.Text(), nullable=True))
    op.add_column('bookings', sa.Column('model_metadata', sa.Text(), nullable=True))
    op.alter_column('bookings', 'total_price',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               type_=sa.Numeric(precision=10, scale=2),
               comment='Total price after all adjustments',
               existing_nullable=False)
    op.alter_column('bookings', 'notes',
               existing_type=sa.TEXT(),
               comment='Client-visible notes',
               existing_nullable=True)
    op.alter_column('bookings', 'calendar_event_id',
               existing_type=sa.INTEGER(),
               type_=sa.String(length=100),
               comment='External calendar event ID',
               existing_nullable=True)
    op.drop_index(op.f('idx_bookings_client_phone'), table_name='bookings')
    op.drop_index(op.f('idx_bookings_created_at'), table_name='bookings')
    op.drop_index(op.f('idx_bookings_date'), table_name='bookings')
    op.drop_index(op.f('idx_bookings_date_range'), table_name='bookings')
    op.drop_index(op.f('idx_bookings_phone_normalized'), table_name='bookings')
    op.drop_index(op.f('idx_bookings_status'), table_name='bookings')
    op.create_index('idx_booking_client_phone', 'bookings', ['client_phone_normalized'], unique=False)
    op.create_index('idx_booking_date_time', 'bookings', ['booking_date', 'start_time', 'end_time'], unique=False)
    op.create_index('idx_booking_payment_status', 'bookings', ['payment_status', 'booking_date'], unique=False)
    op.create_index('idx_booking_priority', 'bookings', ['priority', 'booking_date'], unique=False)
    op.create_index('idx_booking_space_type', 'bookings', ['space_type', 'booking_date'], unique=False)
    op.create_index('idx_booking_state_date', 'bookings', ['state', 'booking_date'], unique=False)
    op.create_index(op.f('ix_bookings_booking_date'), 'bookings', ['booking_date'], unique=False)
    op.create_index(op.f('ix_bookings_booking_reference'), 'bookings', ['booking_reference'], unique=True)
    op.create_index(op.f('ix_bookings_calendar_event_id'), 'bookings', ['calendar_event_id'], unique=False)
    op.create_index(op.f('ix_bookings_client_email'), 'bookings', ['client_email'], unique=False)
    op.create_index(op.f('ix_bookings_client_name'), 'bookings', ['client_name'], unique=False)
    op.create_index(op.f('ix_bookings_client_phone'), 'bookings', ['client_phone'], unique=False)
    op.create_index(op.f('ix_bookings_client_phone_normalized'), 'bookings', ['client_phone_normalized'], unique=False)
    op.create_index(op.f('ix_bookings_created_at'), 'bookings', ['created_at'], unique=False)
    op.create_index(op.f('ix_bookings_created_by'), 'bookings', ['created_by'], unique=False)
    op.create_index(op.f('ix_bookings_end_time'), 'bookings', ['end_time'], unique=False)
    op.create_index(op.f('ix_bookings_is_deleted'), 'bookings', ['is_deleted'], unique=False)
    op.create_index(op.f('ix_bookings_payment_status'), 'bookings', ['payment_status'], unique=False)
    op.create_index(op.f('ix_bookings_source'), 'bookings', ['source'], unique=False)
    op.create_index(op.f('ix_bookings_space_type'), 'bookings', ['space_type'], unique=False)
    op.create_index(op.f('ix_bookings_start_time'), 'bookings', ['start_time'], unique=False)
    op.create_index(op.f('ix_bookings_state'), 'bookings', ['state'], unique=False)
    op.create_index(op.f('ix_bookings_updated_at'), 'bookings', ['updated_at'], unique=False)
    op.create_index(op.f('ix_bookings_updated_by'), 'bookings', ['updated_by'], unique=False)
    op.create_index(op.f('ix_bookings_version'), 'bookings', ['version'], unique=False)
    op.create_unique_constraint('uq_booking_reference', 'bookings', ['booking_reference'])
    op.drop_constraint(op.f('bookings_calendar_event_id_fkey'), 'bookings', type_='foreignkey')
    op.create_foreign_key(None, 'bookings', 'employees', ['created_by'], ['id'], ondelete='SET NULL')
    op.create_foreign_key(None, 'bookings', 'employees', ['updated_by'], ['id'], ondelete='SET NULL')
    op.create_foreign_key(None, 'bookings', 'employees', ['deleted_by'], ['id'], ondelete='SET NULL')
    op.drop_column('bookings', 'date')
    op.drop_column('bookings', 'status')
    op.drop_column('bookings', 'phone_normalized')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('bookings', sa.Column('phone_normalized', sa.VARCHAR(length=20), autoincrement=False, nullable=True))
    op.add_column('bookings', sa.Column('status', postgresql.ENUM('PENDING', 'CONFIRMED', 'CANCELLED', 'COMPLETED', name='bookingstatus'), autoincrement=False, nullable=False))
    op.add_column('bookings', sa.Column('date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'bookings', type_='foreignkey')
    op.drop_constraint(None, 'bookings', type_='foreignkey')
    op.drop_constraint(None, 'bookings', type_='foreignkey')
    op.create_foreign_key(op.f('bookings_calendar_event_id_fkey'), 'bookings', 'calendar_events', ['calendar_event_id'], ['id'])
    op.drop_constraint('uq_booking_reference', 'bookings', type_='unique')
    op.drop_index(op.f('ix_bookings_version'), table_name='bookings')
    op.drop_index(op.f('ix_bookings_updated_by'), table_name='bookings')
    op.drop_index(op.f('ix_bookings_updated_at'), table_name='bookings')
    op.drop_index(op.f('ix_bookings_state'), table_name='bookings')
    op.drop_index(op.f('ix_bookings_start_time'), table_name='bookings')
    op.drop_index(op.f('ix_bookings_space_type'), table_name='bookings')
    op.drop_index(op.f('ix_bookings_source'), table_name='bookings')
    op.drop_index(op.f('ix_bookings_payment_status'), table_name='bookings')
    op.drop_index(op.f('ix_bookings_is_deleted'), table_name='bookings')
    op.drop_index(op.f('ix_bookings_end_time'), table_name='bookings')
    op.drop_index(op.f('ix_bookings_created_by'), table_name='bookings')
    op.drop_index(op.f('ix_bookings_created_at'), table_name='bookings')
    op.drop_index(op.f('ix_bookings_client_phone_normalized'), table_name='bookings')
    op.drop_index(op.f('ix_bookings_client_phone'), table_name='bookings')
    op.drop_index(op.f('ix_bookings_client_name'), table_name='bookings')
    op.drop_index(op.f('ix_bookings_client_email'), table_name='bookings')
    op.drop_index(op.f('ix_bookings_calendar_event_id'), table_name='bookings')
    op.drop_index(op.f('ix_bookings_booking_reference'), table_name='bookings')
    op.drop_index(op.f('ix_bookings_booking_date'), table_name='bookings')
    op.drop_index('idx_booking_state_date', table_name='bookings')
    op.drop_index('idx_booking_space_type', table_name='bookings')
    op.drop_index('idx_booking_priority', table_name='bookings')
    op.drop_index('idx_booking_payment_status', table_name='bookings')
    op.drop_index('idx_booking_date_time', table_name='bookings')
    op.drop_index('idx_booking_client_phone', table_name='bookings')
    op.create_index(op.f('idx_bookings_status'), 'bookings', ['status'], unique=False)
    op.create_index(op.f('idx_bookings_phone_normalized'), 'bookings', ['phone_normalized'], unique=False)
    op.create_index(op.f('idx_bookings_date_range'), 'bookings', ['start_time', 'end_time'], unique=False)
    op.create_index(op.f('idx_bookings_date'), 'bookings', ['date'], unique=False)
    op.create_index(op.f('idx_bookings_created_at'), 'bookings', ['created_at'], unique=False)
    op.create_index(op.f('idx_bookings_client_phone'), 'bookings', ['client_phone'], unique=False)
    op.alter_column('bookings', 'calendar_event_id',
               existing_type=sa.String(length=100),
               type_=sa.INTEGER(),
               comment=None,
               existing_comment='External calendar event ID',
               existing_nullable=True)
    op.alter_column('bookings', 'notes',
               existing_type=sa.TEXT(),
               comment=None,
               existing_comment='Client-visible notes',
               existing_nullable=True)
    op.alter_column('bookings', 'total_price',
               existing_type=sa.Numeric(precision=10, scale=2),
               type_=sa.DOUBLE_PRECISION(precision=53),
               comment=None,
               existing_comment='Total price after all adjustments',
               existing_nullable=False)
    op.drop_column('bookings', 'model_metadata')
    op.drop_column('bookings', 'audit_trail')
    op.drop_column('bookings', 'deleted_by')
    op.drop_column('bookings', 'deleted_at')
    op.drop_column('bookings', 'is_deleted')
    op.drop_column('bookings', 'version')
    op.drop_column('bookings', 'updated_by')
    op.drop_column('bookings', 'created_by')
    op.drop_column('bookings', 'priority')
    op.drop_column('bookings', 'tags')
    op.drop_column('bookings', 'internal_notes')
    op.drop_column('bookings', 'source')
    op.drop_column('bookings', 'payment_status')
    op.drop_column('bookings', 'discount_amount')
    op.drop_column('bookings', 'equipment_price')
    op.drop_column('bookings', 'base_price')
    op.drop_column('bookings', 'special_requirements')
    op.drop_column('bookings', 'equipment_requested')
    op.drop_column('bookings', 'space_type')
    op.drop_column('bookings', 'client_phone_normalized')
    op.drop_column('bookings', 'state_history')
    op.drop_column('bookings', 'state')
    op.drop_column('bookings', 'duration_hours')
    op.drop_column('bookings', 'booking_date')
    op.drop_column('bookings', 'booking_reference')
    op.drop_index(op.f('ix_employee_sessions_version'), table_name='employee_sessions')
    op.drop_index(op.f('ix_employee_sessions_updated_by'), table_name='employee_sessions')
    op.drop_index(op.f('ix_employee_sessions_updated_at'), table_name='employee_sessions')
    op.drop_index(op.f('ix_employee_sessions_session_id'), table_name='employee_sessions')
    op.drop_index(op.f('ix_employee_sessions_refresh_token'), table_name='employee_sessions')
    op.drop_index(op.f('ix_employee_sessions_is_deleted'), table_name='employee_sessions')
    op.drop_index(op.f('ix_employee_sessions_is_active'), table_name='employee_sessions')
    op.drop_index(op.f('ix_employee_sessions_id'), table_name='employee_sessions')
    op.drop_index(op.f('ix_employee_sessions_expires_at'), table_name='employee_sessions')
    op.drop_index(op.f('ix_employee_sessions_employee_id'), table_name='employee_sessions')
    op.drop_index(op.f('ix_employee_sessions_created_by'), table_name='employee_sessions')
    op.drop_index(op.f('ix_employee_sessions_created_at'), table_name='employee_sessions')
    op.drop_index('idx_session_expires', table_name='employee_sessions')
    op.drop_index('idx_session_employee_active', table_name='employee_sessions')
    op.drop_table('employee_sessions')
    op.drop_index(op.f('ix_domain_events_version'), table_name='domain_events')
    op.drop_index(op.f('ix_domain_events_updated_by'), table_name='domain_events')
    op.drop_index(op.f('ix_domain_events_updated_at'), table_name='domain_events')
    op.drop_index(op.f('ix_domain_events_is_deleted'), table_name='domain_events')
    op.drop_index(op.f('ix_domain_events_id'), table_name='domain_events')
    op.drop_index(op.f('ix_domain_events_created_by'), table_name='domain_events')
    op.drop_index(op.f('ix_domain_events_created_at'), table_name='domain_events')
    op.drop_index('idx_event_type', table_name='domain_events')
    op.drop_index('idx_event_occurred', table_name='domain_events')
    op.drop_index('idx_event_aggregate', table_name='domain_events')
    op.drop_table('domain_events')
    op.drop_index(op.f('ix_bookings_legacy_id'), table_name='bookings_legacy')
    op.drop_index('idx_bookings_status', table_name='bookings_legacy')
    op.drop_index('idx_bookings_phone_normalized', table_name='bookings_legacy')
    op.drop_index('idx_bookings_date_range', table_name='bookings_legacy')
    op.drop_index('idx_bookings_date', table_name='bookings_legacy')
    op.drop_index('idx_bookings_created_at', table_name='bookings_legacy')
    op.drop_index('idx_bookings_client_phone', table_name='bookings_legacy')
    op.drop_table('bookings_legacy')
    op.drop_index(op.f('ix_employees_version'), table_name='employees')
    op.drop_index(op.f('ix_employees_username'), table_name='employees')
    op.drop_index(op.f('ix_employees_updated_by'), table_name='employees')
    op.drop_index(op.f('ix_employees_updated_at'), table_name='employees')
    op.drop_index(op.f('ix_employees_status'), table_name='employees')
    op.drop_index(op.f('ix_employees_role'), table_name='employees')
    op.drop_index(op.f('ix_employees_phone'), table_name='employees')
    op.drop_index(op.f('ix_employees_password_expires_at'), table_name='employees')
    op.drop_index(op.f('ix_employees_password_changed_at'), table_name='employees')
    op.drop_index(op.f('ix_employees_locked_until'), table_name='employees')
    op.drop_index(op.f('ix_employees_last_login'), table_name='employees')
    op.drop_index(op.f('ix_employees_last_activity'), table_name='employees')
    op.drop_index(op.f('ix_employees_is_deleted'), table_name='employees')
    op.drop_index(op.f('ix_employees_id'), table_name='employees')
    op.drop_index(op.f('ix_employees_employee_id'), table_name='employees')
    op.drop_index(op.f('ix_employees_email'), table_name='employees')
    op.drop_index(op.f('ix_employees_department'), table_name='employees')
    op.drop_index(op.f('ix_employees_created_by'), table_name='employees')
    op.drop_index(op.f('ix_employees_created_at'), table_name='employees')
    op.drop_index('idx_employee_role_status', table_name='employees')
    op.drop_index('idx_employee_last_activity', table_name='employees')
    op.drop_index('idx_employee_failed_logins', table_name='employees')
    op.drop_index('idx_employee_department_status', table_name='employees')
    op.drop_table('employees')
    # ### end Alembic commands ###
