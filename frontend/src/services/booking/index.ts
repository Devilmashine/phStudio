import { BookingData } from '../../types';
import { getAvailableSlots } from '../../data/availability';
import { calendarService } from '../calendar.service';
import { telegramNotificationService } from '../telegram/sendBooking';

// Diagnostic logging for booking module
console.warn('üö® BOOKING MODULE LOADED üö®');
console.log('üì¶ Booking Module Import Details:', {
  telegramImportStatus: 'Imported',
  telegramSendFunctionPresent: true,
  
  // Additional runtime checks
  nodeEnv: process.env.NODE_ENV,
  viteMode: (import.meta.env as any)?.MODE,
  
  // Detailed environment variable logging
  telegramEnvVars: Object.keys(process.env)
    .filter(key => key.includes('TELEGRAM') || key.includes('VITE_TELEGRAM'))
    .reduce((acc, key) => {
      acc[key] = process.env[key] ? '‚úÖ PRESENT (masked)' : '‚ùå MISSING';
      return acc;
    }, {} as Record<string, string>)
});

// Simple in-memory store for bookings (in production, this should be a database)
const bookingsStore = new Map<string, BookingData>();

/**
 * Generates a unique booking ID
 */
function generateBookingId(): string {
  return `booking_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
}

/**
 * Retrieves a booking by its ID
 */
export function getBookingById(id: string): BookingData | undefined {
  return bookingsStore.get(id);
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–ª–æ—Ç–æ–≤ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∞—Ç—ã.
 */
export async function checkAvailability(date: string): Promise<Set<string>> {
  try {
    const { slots } = await getAvailableSlots(date);
    const bookedSlots = new Set<string>();

    slots.forEach(slot => {
      if (!slot.available) {
        bookedSlots.add(slot.startTime);
      }
    });

    return bookedSlots;
  } catch (error) {
    console.error('Error checking availability:', error);
    throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

interface BookingRequest {
  date: string;
  times: string[];
  name: string;
  phone: string;
  totalPrice: number;
}

export async function createBooking(bookingData: BookingRequest): Promise<BookingData> {
  console.warn('üö® CREATE BOOKING STARTED üö®');
  console.log('üìã Booking Request Details:', {
    date: bookingData.date,
    times: bookingData.times,
    name: bookingData.name,
    phone: bookingData.phone,
    totalPrice: bookingData.totalPrice
  });

  // Generate unique booking ID
  const bookingId = generateBookingId();

  // Prepare booking data
  const booking: BookingData = {
    id: bookingId,
    ...bookingData,
    status: 'pending'
  };

  console.warn('üö® BEFORE CALENDAR EVENT CREATION üö®');
  
  // Create calendar event
  const calendarEvent = await calendarService.createEvent({
    summary: `–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è ${bookingData.name}`,
    description: `–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ ${bookingData.name}, –¢–µ–ª–µ—Ñ–æ–Ω: ${bookingData.phone}`,
    start: {
      dateTime: new Date(`${bookingData.date}T${bookingData.times[0]}:00`).toISOString(),
      timeZone: 'Europe/Moscow'
    },
    end: {
      dateTime: new Date(`${bookingData.date}T${parseInt(bookingData.times[0]) + 1}:00:00`).toISOString(),
      timeZone: 'Europe/Moscow'
    },
    colorId: '7',
    status: 'confirmed'
  });

  console.warn('üö® CALENDAR EVENT CREATED üö®');
  console.log('üìÖ Calendar Event Details:', {
    eventId: calendarEvent.id,
    htmlLink: calendarEvent.htmlLink
  });

  // Store booking in memory
  bookingsStore.set(bookingId, booking);

  console.warn('üö® ATTEMPTING TELEGRAM NOTIFICATION üö®');
  
  try {
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ Telegram-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    console.warn('üö® FORCING TELEGRAM NOTIFICATION üö®');
    const result = await telegramNotificationService.sendBookingNotification(booking);
    console.warn('‚úÖ TELEGRAM NOTIFICATION RESULT', result);
  } catch (telegramError) {
    console.error('‚ùå TELEGRAM NOTIFICATION FAILED', telegramError);
  }

  console.warn('üö® BOOKING CREATION COMPLETED üö®');
  
  return booking;
}

export async function confirmBooking(bookingId: string | undefined): Promise<BookingData | undefined> {
  if (!bookingId) {
    console.error('‚ùå CONFIRM BOOKING FAILED: No booking ID provided');
    return undefined;
  }

  const booking = bookingsStore.get(bookingId);
  
  if (!booking) {
    console.error(`‚ùå CONFIRM BOOKING FAILED: No booking found with ID ${bookingId}`);
    return undefined;
  }

  // Update booking status
  booking.status = 'confirmed';
  bookingsStore.set(bookingId, booking);

  console.warn('‚úÖ BOOKING CONFIRMED üö®');
  console.log('üìã Confirmed Booking Details:', {
    id: booking.id,
    name: booking.name,
    date: booking.date,
    times: booking.times
  });

  // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ
  await calendarService.updateEvent(booking.id || '', {
    summary: `–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: ${booking.name}`
  });

  return booking;
}

export async function rejectBooking(bookingId: string): Promise<void> {
  const booking = bookingsStore.get(bookingId);
  
  if (!booking) {
    throw new Error('–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
  }

  // –£–¥–∞–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
  await calendarService.deleteEvent(bookingId);

  // –£–¥–∞–ª—è–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑ –ø–∞–º—è—Ç–∏
  bookingsStore.delete(bookingId);
}