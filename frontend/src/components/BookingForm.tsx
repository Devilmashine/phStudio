import React, { useState, useCallback, useEffect } from 'react';
import { format } from 'date-fns';
import { Link } from 'react-router-dom';
import { studio } from '../data/studio';
import Calendar from './Calendar';
import TimeSlots from './TimeSlots';
import Legend, { TimeSlotsLegendItems } from './common/Legend';
import Modal from './Modal';
import CheckboxField from './ui/CheckboxField';
import { termsContent } from '../data/terms';
import { createBooking } from '../services/booking';
import { formatPhoneNumber } from '../utils/validation/phoneValidation';

// –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å –ø–æ–º–æ—â—å—é —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
const validatePhone = (phone: string): boolean => {
  const phoneRegex = /^(\+7|7|8)?[\s-]?\(?[489][0-9]{2}\)?[\s-]?[0-9]{3}[\s-]?[0-9]{2}[\s-]?[0-9]{2}$/;
  return phoneRegex.test(phone.replace(/\D/g, ''));
};

// –ö–∞—Å—Ç–æ–º–Ω—ã–π —Ö—É–∫ –¥–ª—è –º–∞—Å–∫–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
const usePhoneMask = (initialValue: string = '') => {
  const [value, setValue] = useState(initialValue);

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const formattedVal = formatPhoneNumber(e.target.value);
    setValue(formattedVal);
  };

  return { value, handleChange };
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—è
interface InputFieldProps {
  label: string;
  value: string;
  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;
  type?: string;
  required?: boolean;
  error?: string;
}

const InputField = React.memo(({ 
  label, 
  value, 
  onChange, 
  type = "text", 
  required = true, 
  error 
}: InputFieldProps) => (
  <div className="w-full">
    <label className="block text-sm font-medium text-gray-700 mb-2" htmlFor={label}>{label}</label>
    <input
      id={label}
      type={type}
      value={value}
      onChange={onChange}
      className={`w-full p-3 border ${
        error ? 'border-red-500' : 'border-gray-300'
      } rounded-lg focus:ring-2 focus:ring-indigo-500 focus:outline-none transition-colors duration-150`}
      required={required}
      aria-invalid={!!error}
      aria-describedby={error ? `${label}-error` : undefined}
    />
    {error && <p id={`${label}-error`} className="text-red-500 text-xs mt-1" role="alert">{error}</p>}
  </div>
));

export default function BookingForm() {
  const [selectedDate, setSelectedDate] = useState<Date | null>(null);
  const [selectedTimes, setSelectedTimes] = useState<string[]>([]);
  const [name, setName] = useState('');
  const { value: phone, handleChange: handlePhoneChange } = usePhoneMask();
  const [termsAccepted, setTermsAccepted] = useState(false);
  const [privacyAccepted, setPrivacyAccepted] = useState(false);
  const [showTermsModal, setShowTermsModal] = useState(false);
  const [peopleCount, setPeopleCount] = useState(1);
  const [peopleError, setPeopleError] = useState('');
  const [studioRulesAccepted, setStudioRulesAccepted] = useState(false);
  const [showStudioRulesModal, setShowStudioRulesModal] = useState(false);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ—à–∏–±–æ–∫
  const [nameError, setNameError] = useState('');
  const [phoneError, setPhoneError] = useState('');
  const [isSubmitting, setIsSubmitting] = useState(false);

  // –ü—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ: –≤–∞–ª–∏–¥–∞—Ü–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
  useEffect(() => {
    if (name.length > 0 && name.length < 2) {
      setNameError('–ò–º—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ');
    } else {
      setNameError('');
    }
  }, [name]);

  useEffect(() => {
    if (phone && !validatePhone(phone)) {
      setPhoneError('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞');
    } else {
      setPhoneError('');
    }
  }, [phone]);

  useEffect(() => {
    if (peopleCount < 1) {
      setPeopleError('–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫ (–º–∏–Ω–∏–º—É–º 1)');
    } else if (peopleCount > 30) {
      setPeopleError('–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫ –¥–ª—è –æ–¥–Ω–æ–π –±—Ä–æ–Ω–∏');
    } else {
      setPeopleError('');
    }
  }, [peopleCount]);

  const handleTimeSelect = useCallback((time: string) => {
    setSelectedTimes(prev => {
      if (prev.includes(time)) {
        return prev.filter(t => t !== time);
      }
      return [...prev, time].sort();
    });
  }, []);

  // –ü–µ—Ä–µ—Å—á—ë—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Å —É—á—ë—Ç–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —á–µ–ª–æ–≤–µ–∫
  const basePeople = 5;
  const extraPeople = Math.max(0, peopleCount - basePeople);
  const extraFee = extraPeople * 200 * selectedTimes.length;
  const totalPrice = selectedTimes.length * studio.pricePerHour + extraFee;

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
    let hasError = false;
    
    if (!name || name.length < 2) {
      setNameError('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è');
      hasError = true;
    }
    
    if (!validatePhone(phone)) {
      setPhoneError('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞');
      hasError = true;
    }
    
    if (peopleCount < 1) {
      setPeopleError('–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫ (–º–∏–Ω–∏–º—É–º 1)');
      hasError = true;
    } else if (peopleCount > 30) {
      setPeopleError('–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫ –¥–ª—è –æ–¥–Ω–æ–π –±—Ä–æ–Ω–∏');
      hasError = true;
    } else {
      setPeopleError('');
    }
    
    if (hasError) return;

    setIsSubmitting(true);

    const bookingData = {
      date: selectedDate ? format(selectedDate, 'yyyy-MM-dd') : '',
      times: selectedTimes,
      name,
      phone: phone.replace(/\D/g, ''),
      total_price: totalPrice, // snake_case –¥–ª—è backend
      people_count: peopleCount, // snake_case –¥–ª—è backend
      service: '–°—Ç—É–¥–∏–π–Ω–∞—è —Ñ–æ—Ç–æ—Å–µ—Å—Å–∏—è',
      id: `booking_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`
    };
    
    try {
      // Use the real booking service instead of mock
      const bookingResponse = await createBooking({
        date: bookingData.date,
        times: bookingData.times,
        name: bookingData.name,
        phone: bookingData.phone,
        totalPrice: bookingData.total_price,
        peopleCount: bookingData.people_count
      });

      console.log('Booking created successfully:', bookingResponse);
      
      // Verify booking was saved by checking availability for the booked slot
      try {
        const dateStr = format(selectedDate!, 'yyyy-MM-dd');
        const response = await fetch(`/api/calendar/day-details?date=${dateStr}`);
        if (response.ok) {
          const dayDetails = await response.json();
          const bookedSlot = dayDetails.slots.find((slot: any) => 
            selectedTimes.includes(slot.time) && !slot.available
          );
          
          if (bookedSlot) {
            console.log('‚úÖ Booking verification successful - slot is now unavailable');
          } else {
            console.warn('‚ö†Ô∏è Booking verification failed - slot still appears available');
          }
        }
      } catch (verificationError) {
        console.warn('Could not verify booking:', verificationError);
      }
      
      // Show detailed success message with booking ID
      const successMessage = `–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!\n\n` +
        `üÜî –ù–æ–º–µ—Ä –±—Ä–æ–Ω–∏: ${bookingResponse.id}\n` +
        `üìÖ –î–∞—Ç–∞: ${format(selectedDate!, 'dd.MM.yyyy')}\n` +
        `üïú –í—Ä–µ–º—è: ${selectedTimes.join(', ')}\n` +
        `üí∞ –°—É–º–º–∞: ${totalPrice} ‚ÇΩ\n\n` +
        `–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!`;
      
      // Store booking ID for potential future reference
      sessionStorage.setItem('lastBookingId', bookingResponse.id.toString());
      
      alert(successMessage);
      
      // Reset form after successful booking
      setSelectedDate(null);
      setSelectedTimes([]);
      setName('');
      handlePhoneChange({ target: { value: '' } } as React.ChangeEvent<HTMLInputElement>);
      setTermsAccepted(false);
      setPrivacyAccepted(false);
      setPeopleCount(1);
      setStudioRulesAccepted(false);
      
      // Force calendar refresh by dispatching a custom event
      // This will tell calendar components to refresh their data
      window.dispatchEvent(new CustomEvent('bookingCreated', {
        detail: {
          bookingId: bookingResponse.id,
          date: bookingData.date,
          times: bookingData.times
        }
      }));
    } catch (error) {
      console.error('Failed to create booking:', error);
      const errorMessage = error instanceof Error ? error.message : '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.';
      alert(errorMessage);
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <section id="booking" className="py-10 sm:py-16 md:py-20">
      <div className="max-w-6xl mx-auto px-2 sm:px-4 md:px-6 lg:px-8">
        <div className="text-center mb-10 md:mb-16">
          <h2 className="text-3xl sm:text-4xl font-bold text-gray-900 mb-2 md:mb-4">–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—É–¥–∏—é</h2>
          <p className="text-base sm:text-xl text-gray-600">–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è —Å—ä—ë–º–∫–∏</p>
        </div>
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8 md:gap-12 items-start">
          <div className="space-y-6 sticky top-4 z-10">
            <Calendar
              selectedDate={selectedDate}
              onChange={(date) => {
                setSelectedDate(date);
                setSelectedTimes([]);
              }}
            />
            {selectedDate && (
              <div className="overflow-x-auto">
                <TimeSlots
                  date={selectedDate}
                  selectedTimes={selectedTimes}
                  onSelectTime={handleTimeSelect}
                />
                {/* –õ–µ–≥–µ–Ω–¥–∞ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ */}
                <Legend 
                  items={TimeSlotsLegendItems} 
                  className="mt-3" 
                  compact={true}
                  size="sm"
                />
              </div>
            )}
          </div>
          <form onSubmit={handleSubmit} className="space-y-6 bg-white p-4 sm:p-6 md:p-8 rounded-xl shadow-lg w-full max-w-lg mx-auto lg:mx-0 overflow-auto" role="form" aria-label="–§–æ—Ä–º–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è">
            <InputField
              label="–í–∞—à–µ –∏–º—è"
              value={name}
              onChange={(e) => setName(e.target.value)}
              error={nameError}
            />
            <InputField
              label="–¢–µ–ª–µ—Ñ–æ–Ω"
              value={phone}
              onChange={handlePhoneChange}
              type="tel"
              error={phoneError}
            />
            <InputField
              label="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫"
              value={peopleCount.toString()}
              onChange={e => setPeopleCount(Math.max(1, parseInt(e.target.value) || 1))}
              type="number"
              required
              error={peopleError}
            />
            <div className="bg-gray-50 p-4 rounded-lg">
              <h4 className="font-medium text-gray-900 mb-2">–î–µ—Ç–∞–ª–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è</h4>
              <div className="space-y-2 text-sm text-gray-600">
                {selectedDate && (
                  <p>–î–∞—Ç–∞: {format(selectedDate, 'dd.MM.yyyy')}</p>
                )}
                {selectedTimes.length > 0 && (
                  <p>–í—Ä–µ–º—è: {selectedTimes.join(', ')}</p>
                )}
                <p className="text-lg font-bold text-indigo-600">
                  –ò—Ç–æ–≥–æ: {totalPrice} ‚ÇΩ
                </p>
              </div>
            </div>
            <div className="space-y-4">
              <CheckboxField
                checked={termsAccepted}
                onChange={(e) => setTermsAccepted(e.target.checked)}
                label="–Ø –ø—Ä–∏–Ω–∏–º–∞—é —É—Å–ª–æ–≤–∏—è"
                linkText="–ø—É–±–ª–∏—á–Ω–æ–π –æ—Ñ–µ—Ä—Ç—ã"
                onLinkClick={() => setShowTermsModal(true)}
              />
              <label className="flex items-start space-x-3 cursor-pointer select-none">
                <input
                  type="checkbox"
                  checked={privacyAccepted}
                  onChange={(e) => setPrivacyAccepted(e.target.checked)}
                  className="mt-1 accent-indigo-600 focus:ring-2 focus:ring-indigo-500 focus:outline-none transition-colors"
                  required
                />
                <span className="text-sm text-gray-600">
                  –Ø –¥–∞—é —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–∏–Ω–∏–º–∞—é —É—Å–ª–æ–≤–∏—è{' '}
                  <Link to="/privacy" target="_blank" className="text-indigo-600 hover:underline">
                    –ü–æ–ª–∏—Ç–∏–∫–∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
                  </Link>
                </span>
              </label>
              <CheckboxField
                checked={studioRulesAccepted}
                onChange={e => setStudioRulesAccepted(e.target.checked)}
                label="–Ø —Å–æ–≥–ª–∞—Å–µ–Ω —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ —Å—Ç—É–¥–∏–∏"
                linkText="–ø—Ä–∞–≤–∏–ª–∞–º–∏ —Å—Ç—É–¥–∏–∏"
                onLinkClick={() => setShowStudioRulesModal(true)}
              />
            </div>
            <button
              type="submit"
              disabled={
                !selectedDate || 
                selectedTimes.length === 0 || 
                !termsAccepted || 
                !privacyAccepted || 
                !studioRulesAccepted ||
                !!nameError || 
                !!phoneError ||
                !!peopleError ||
                isSubmitting
              }
              className="w-full bg-indigo-600 text-white py-3 rounded-lg hover:bg-indigo-700 transition-colors disabled:bg-gray-300 disabled:cursor-not-allowed flex items-center justify-center gap-2 focus:outline-none focus:ring-2 focus:ring-indigo-500"
              aria-busy={isSubmitting}
              aria-label="–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—É–¥–∏—é"
            >
              {isSubmitting && (
                <svg className="animate-spin h-5 w-5 text-white mr-2" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" aria-hidden="true">
                  <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                  <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8v8z"></path>
                </svg>
              )}
              {isSubmitting ? '–û—Ç–ø—Ä–∞–≤–∫–∞...' : '–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å'}
            </button>
          </form>
        </div>

        {/* –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ –¥–ª—è —Ç–µ—Ä–º–∏–Ω–æ–≤ –∏ –ø–æ–ª–∏—Ç–∏–∫–∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ */}
        {showTermsModal && (
          <Modal 
            isOpen={true}
            onClose={() => setShowTermsModal(false)}
            title="–ü—É–±–ª–∏—á–Ω–∞—è –æ—Ñ–µ—Ä—Ç–∞"
          >
            <div className="prose prose-sm max-w-none">
              {termsContent.split('\n\n').map((paragraph, index) => (
                <p key={index} className="mb-4">
                  {paragraph}
                </p>
              ))}
            </div>
          </Modal>
        )}
        {showStudioRulesModal && (
          <Modal 
            isOpen={true}
            onClose={() => setShowStudioRulesModal(false)}
            title="–ü—Ä–∞–≤–∏–ª–∞ —Å—Ç—É–¥–∏–∏"
          >
            <div className="prose prose-sm max-w-none">
              <ul className="list-disc pl-5 space-y-2">
                <li>–ú–∞–∫—Å–∏–º—É–º 5 —á–µ–ª–æ–≤–µ–∫ –±–µ—Å–ø–ª–∞—Ç–Ω–æ, –∑–∞ –∫–∞–∂–¥–æ–≥–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ ‚Äî 200 —Ä—É–±/—á–∞—Å.</li>
                <li>–í —Å—Ç—É–¥–∏–∏ –∑–∞–ø—Ä–µ—â–µ–Ω–æ –∫—É—Ä–∏—Ç—å, —Ä–∞—Å–ø–∏–≤–∞—Ç—å –∞–ª–∫–æ–≥–æ–ª—å, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–π –æ–≥–æ–Ω—å.</li>
                <li>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞ –∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è ‚Äî –±–µ—Ä–µ–∂–Ω–æ, –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤–µ—Ä–Ω—É—Ç—å –Ω–∞ –º–µ—Å—Ç–æ.</li>
                <li>–î–µ—Ç–∏ –¥–æ–ø—É—Å–∫–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–∏ –≤–∑—Ä–æ—Å–ª—ã—Ö.</li>
                <li>–í—Ä–µ–º—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∫–ª—é—á–∞–µ—Ç –≤—Ä–µ–º—è –Ω–∞ —Å–±–æ—Ä—ã –∏ —É–±–æ—Ä–∫—É.</li>
                <li>–ó–∞–ø—Ä–µ—â–µ–Ω–æ —à—É–º–µ—Ç—å, –º–µ—à–∞—Ç—å –¥—Ä—É–≥–∏–º –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–∞–º –∏ –Ω–∞—Ä—É—à–∞—Ç—å –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫.</li>
                <li>–ó–∞ –ø–æ—Ä—á—É –∏–º—É—â–µ—Å—Ç–≤–∞ –≤–∑—ã—Å–∫–∏–≤–∞–µ—Ç—Å—è –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è –ø–æ –æ—Ü–µ–Ω–∫–µ —Å—Ç—É–¥–∏–∏.</li>
                <li>–°–æ–±–ª—é–¥–∞–π—Ç–µ —á–∏—Å—Ç–æ—Ç—É, —É–≤–∞–∂–∞–π—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª –∏ –¥—Ä—É–≥–∏—Ö –≥–æ—Å—Ç–µ–π.</li>
                <li>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Å—Ç–∞–≤–ª—è–µ—Ç –∑–∞ —Å–æ–±–æ–π –ø—Ä–∞–≤–æ –æ—Ç–∫–∞–∑–∞—Ç—å –≤ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏ –±–µ–∑ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –ø—Ä–∏—á–∏–Ω.</li>
                <li>–ü–æ–¥—Ä–æ–±–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ ‚Äî –Ω–∞ —Å–∞–π—Ç–µ –∏ —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.</li>
              </ul>
            </div>
          </Modal>
        )}
      </div>
    </section>
  );
}