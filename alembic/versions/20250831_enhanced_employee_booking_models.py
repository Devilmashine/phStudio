"""Enhanced employee and booking models with security features and state machine

Revision ID: 20250831_enhanced_models
Revises: bf1a8a7784e5
Create Date: 2025-08-31 10:00:00.000000

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '20250831_enhanced_models'
down_revision = 'bf1a8a7784e5'
branch_labels = None
depends_on = None

def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Create domain_events table first (needed for foreign keys)
    op.create_table('domain_events',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('event_id', postgresql.UUID(as_uuid=True), nullable=True),
        sa.Column('aggregate_id', sa.String(length=50), nullable=False),
        sa.Column('aggregate_type', sa.String(length=50), nullable=False),
        sa.Column('event_type', sa.String(length=100), nullable=False),
        sa.Column('event_data', sa.JSON(), nullable=False),
        sa.Column('event_metadata', sa.JSON(), nullable=True),
        sa.Column('occurred_at', sa.DateTime(timezone=True), nullable=True),
        sa.Column('processed_at', sa.DateTime(timezone=True), nullable=True),
        sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
        sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
        sa.Column('created_by', sa.Integer(), nullable=True),
        sa.Column('updated_by', sa.Integer(), nullable=True),
        sa.Column('version', sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(['created_by'], ['employees.id'], ),
        sa.ForeignKeyConstraint(['updated_by'], ['employees.id'], ),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('event_id')
    )
    op.create_index('idx_event_aggregate', 'domain_events', ['aggregate_type', 'aggregate_id'], unique=False)
    op.create_index('idx_event_occurred', 'domain_events', ['occurred_at'], unique=False)
    op.create_index('idx_event_type', 'domain_events', ['event_type'], unique=False)
    op.create_index(op.f('ix_domain_events_created_at'), 'domain_events', ['created_at'], unique=False)
    op.create_index(op.f('ix_domain_events_updated_at'), 'domain_events', ['updated_at'], unique=False)
    
    # Modify employees table
    op.add_column('employees', sa.Column('employee_id', sa.String(length=20), nullable=True))
    op.add_column('employees', sa.Column('password_hash', sa.String(length=255), nullable=True))
    op.add_column('employees', sa.Column('role', sa.Enum('OWNER', 'ADMIN', 'MANAGER', name='employeerole'), nullable=True))
    op.add_column('employees', sa.Column('mfa_secret', sa.String(length=32), nullable=True))
    op.add_column('employees', sa.Column('password_changed_at', sa.DateTime(timezone=True), nullable=True))
    op.add_column('employees', sa.Column('failed_login_attempts', sa.Integer(), nullable=True))
    op.add_column('employees', sa.Column('locked_until', sa.DateTime(timezone=True), nullable=True))
    op.add_column('employees', sa.Column('department', sa.String(length=50), nullable=True))
    op.add_column('employees', sa.Column('status', sa.Enum('ACTIVE', 'INACTIVE', 'SUSPENDED', 'TERMINATED', name='employeestatus'), nullable=True))
    op.add_column('employees', sa.Column('last_activity', sa.DateTime(timezone=True), nullable=True))
    op.add_column('employees', sa.Column('position', sa.String(length=100), nullable=True))
    op.add_column('employees', sa.Column('created_at', sa.DateTime(timezone=True), nullable=True))
    op.add_column('employees', sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True))
    op.add_column('employees', sa.Column('created_by', sa.Integer(), nullable=True))
    op.add_column('employees', sa.Column('updated_by', sa.Integer(), nullable=True))
    op.add_column('employees', sa.Column('version', sa.Integer(), nullable=True))
    
    # Set default values for new columns
    op.execute("UPDATE employees SET employee_id = 'EMP' || id")
    op.execute("UPDATE employees SET role = 'ADMIN' WHERE role IS NULL")
    op.execute("UPDATE employees SET status = 'ACTIVE' WHERE status IS NULL")
    op.execute("UPDATE employees SET version = 1 WHERE version IS NULL")
    op.execute("UPDATE employees SET created_at = NOW() WHERE created_at IS NULL")
    op.execute("UPDATE employees SET updated_at = NOW() WHERE updated_at IS NULL")
    
    # Make new columns non-nullable
    op.alter_column('employees', 'employee_id', nullable=False)
    op.alter_column('employees', 'password_hash', nullable=False)
    op.alter_column('employees', 'role', nullable=False)
    op.alter_column('employees', 'status', nullable=False)
    op.alter_column('employees', 'version', nullable=False)
    op.alter_column('employees', 'created_at', nullable=False)
    op.alter_column('employees', 'updated_at', nullable=False)
    
    # Add foreign key constraints
    op.create_foreign_key('fk_employees_created_by', 'employees', 'employees', ['created_by'], ['id'])
    op.create_foreign_key('fk_employees_updated_by', 'employees', 'employees', ['updated_by'], ['id'])
    
    # Create indexes
    op.create_index(op.f('ix_employees_created_at'), 'employees', ['created_at'], unique=False)
    op.create_index(op.f('ix_employees_updated_at'), 'employees', ['updated_at'], unique=False)
    op.create_index('ix_employees_employee_id', 'employees', ['employee_id'], unique=True)
    op.create_index('ix_employees_role', 'employees', ['role'], unique=False)
    op.create_index('ix_employees_status', 'employees', ['status'], unique=False)
    
    # Modify bookings table
    op.add_column('bookings', sa.Column('booking_reference', sa.String(length=20), nullable=True))
    op.add_column('bookings', sa.Column('duration_hours', sa.Integer(), nullable=True))
    op.add_column('bookings', sa.Column('state', sa.Enum('DRAFT', 'PENDING', 'CONFIRMED', 'IN_PROGRESS', 'COMPLETED', 'CANCELLED', 'NO_SHOW', name='bookingstate'), nullable=True))
    op.add_column('bookings', sa.Column('state_history', sa.JSON(), nullable=True))
    op.add_column('bookings', sa.Column('client_phone_normalized', sa.String(length=15), nullable=True))
    op.add_column('bookings', sa.Column('space_type', sa.String(length=50), nullable=True))
    op.add_column('bookings', sa.Column('equipment_requested', sa.JSON(), nullable=True))
    op.add_column('bookings', sa.Column('special_requirements', sa.Text(), nullable=True))
    op.add_column('bookings', sa.Column('base_price', sa.Numeric(precision=10, scale=2), nullable=True))
    op.add_column('bookings', sa.Column('equipment_price', sa.Numeric(precision=10, scale=2), nullable=True))
    op.add_column('bookings', sa.Column('discount_amount', sa.Numeric(precision=10, scale=2), nullable=True))
    op.add_column('bookings', sa.Column('total_price', sa.Numeric(precision=10, scale=2), nullable=True))
    op.add_column('bookings', sa.Column('payment_status', sa.String(length=20), nullable=True))
    op.add_column('bookings', sa.Column('source', sa.Enum('WEBSITE', 'PHONE', 'WALK_IN', 'ADMIN', name='bookingsource'), nullable=True))
    op.add_column('bookings', sa.Column('internal_notes', sa.Text(), nullable=True))
    op.add_column('bookings', sa.Column('employee_id', sa.Integer(), nullable=True))
    op.add_column('bookings', sa.Column('created_at', sa.DateTime(timezone=True), nullable=True))
    op.add_column('bookings', sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True))
    op.add_column('bookings', sa.Column('created_by', sa.Integer(), nullable=True))
    op.add_column('bookings', sa.Column('updated_by', sa.Integer(), nullable=True))
    op.add_column('bookings', sa.Column('version', sa.Integer(), nullable=True))
    
    # Set default values
    op.execute("UPDATE bookings SET state = 'PENDING' WHERE state IS NULL")
    op.execute("UPDATE bookings SET source = 'WEBSITE' WHERE source IS NULL")
    op.execute("UPDATE bookings SET payment_status = 'pending' WHERE payment_status IS NULL")
    op.execute("UPDATE bookings SET version = 1 WHERE version IS NULL")
    op.execute("UPDATE bookings SET created_at = NOW() WHERE created_at IS NULL")
    op.execute("UPDATE bookings SET updated_at = NOW() WHERE updated_at IS NULL")
    
    # Make columns non-nullable
    op.alter_column('bookings', 'state', nullable=False)
    op.alter_column('bookings', 'source', nullable=False)
    op.alter_column('bookings', 'version', nullable=False)
    op.alter_column('bookings', 'created_at', nullable=False)
    op.alter_column('bookings', 'updated_at', nullable=False)
    
    # Add foreign key constraint
    op.create_foreign_key('fk_bookings_employee_id', 'bookings', 'employees', ['employee_id'], ['id'])
    op.create_foreign_key('fk_bookings_created_by', 'bookings', 'employees', ['created_by'], ['id'])
    op.create_foreign_key('fk_bookings_updated_by', 'bookings', 'employees', ['updated_by'], ['id'])
    
    # Create indexes
    op.create_index(op.f('ix_bookings_created_at'), 'bookings', ['created_at'], unique=False)
    op.create_index(op.f('ix_bookings_updated_at'), 'bookings', ['updated_at'], unique=False)
    op.create_index('idx_booking_date_time', 'bookings', ['booking_date', 'start_time', 'end_time'], unique=False)
    op.create_index('idx_booking_employee', 'bookings', ['employee_id'], unique=False)
    op.create_index('idx_booking_phone', 'bookings', ['client_phone_normalized'], unique=False)
    op.create_index('idx_booking_reference', 'bookings', ['booking_reference'], unique=True)
    op.create_index('idx_booking_state', 'bookings', ['state'], unique=False)
    
    # Add check constraint
    op.create_check_constraint('check_time_validity', 'bookings', 'end_time > start_time')
    
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Remove check constraint
    op.drop_constraint('check_time_validity', 'bookings', type_='check')
    
    # Drop indexes
    op.drop_index('idx_booking_state', table_name='bookings')
    op.drop_index('idx_booking_reference', table_name='bookings')
    op.drop_index('idx_booking_phone', table_name='bookings')
    op.drop_index('idx_booking_employee', table_name='bookings')
    op.drop_index('idx_booking_date_time', table_name='bookings')
    op.drop_index(op.f('ix_bookings_updated_at'), table_name='bookings')
    op.drop_index(op.f('ix_bookings_created_at'), table_name='bookings')
    
    # Drop foreign key constraints
    op.drop_constraint('fk_bookings_updated_by', 'bookings', type_='foreignkey')
    op.drop_constraint('fk_bookings_created_by', 'bookings', type_='foreignkey')
    op.drop_constraint('fk_bookings_employee_id', 'bookings', type_='foreignkey')
    
    # Drop columns from bookings
    op.drop_column('bookings', 'version')
    op.drop_column('bookings', 'updated_by')
    op.drop_column('bookings', 'created_by')
    op.drop_column('bookings', 'updated_at')
    op.drop_column('bookings', 'created_at')
    op.drop_column('bookings', 'employee_id')
    op.drop_column('bookings', 'internal_notes')
    op.drop_column('bookings', 'source')
    op.drop_column('bookings', 'payment_status')
    op.drop_column('bookings', 'total_price')
    op.drop_column('bookings', 'discount_amount')
    op.drop_column('bookings', 'equipment_price')
    op.drop_column('bookings', 'base_price')
    op.drop_column('bookings', 'special_requirements')
    op.drop_column('bookings', 'equipment_requested')
    op.drop_column('bookings', 'space_type')
    op.drop_column('bookings', 'client_phone_normalized')
    op.drop_column('bookings', 'state_history')
    op.drop_column('bookings', 'state')
    op.drop_column('bookings', 'duration_hours')
    op.drop_column('bookings', 'booking_reference')
    
    # Drop enum types
    op.execute("DROP TYPE IF EXISTS bookingsource")
    op.execute("DROP TYPE IF EXISTS bookingstate")
    
    # Drop indexes from employees
    op.drop_index('ix_employees_status', table_name='employees')
    op.drop_index('ix_employees_role', table_name='employees')
    op.drop_index('ix_employees_employee_id', table_name='employees')
    op.drop_index(op.f('ix_employees_updated_at'), table_name='employees')
    op.drop_index(op.f('ix_employees_created_at'), table_name='employees')
    
    # Drop foreign key constraints from employees
    op.drop_constraint('fk_employees_updated_by', 'employees', type_='foreignkey')
    op.drop_constraint('fk_employees_created_by', 'employees', type_='foreignkey')
    
    # Drop columns from employees
    op.drop_column('employees', 'version')
    op.drop_column('employees', 'updated_by')
    op.drop_column('employees', 'created_by')
    op.drop_column('employees', 'updated_at')
    op.drop_column('employees', 'created_at')
    op.drop_column('employees', 'position')
    op.drop_column('employees', 'last_activity')
    op.drop_column('employees', 'status')
    op.drop_column('employees', 'department')
    op.drop_column('employees', 'locked_until')
    op.drop_column('employees', 'failed_login_attempts')
    op.drop_column('employees', 'password_changed_at')
    op.drop_column('employees', 'mfa_secret')
    op.drop_column('employees', 'role')
    op.drop_column('employees', 'password_hash')
    op.drop_column('employees', 'employee_id')
    
    # Drop enum types
    op.execute("DROP TYPE IF EXISTS employeestatus")
    op.execute("DROP TYPE IF EXISTS employeerole")
    
    # Drop domain_events table
    op.drop_index('idx_event_type', table_name='domain_events')
    op.drop_index('idx_event_occurred', table_name='domain_events')
    op.drop_index('idx_event_aggregate', table_name='domain_events')
    op.drop_index(op.f('ix_domain_events_updated_at'), table_name='domain_events')
    op.drop_index(op.f('ix_domain_events_created_at'), table_name='domain_events')
    op.drop_table('domain_events')
    
    # ### end Alembic commands ###